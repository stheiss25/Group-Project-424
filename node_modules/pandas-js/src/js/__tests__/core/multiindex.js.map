{"version":3,"sources":["../../../es6/__tests__/core/multiindex.js"],"names":[],"mappings":";;AAIA;;;;AAEA;;;;AANA;;;;AASA,SAAS,YAAT,EAAuB,YAAM;AAC3B,WAAS,OAAT,EAAkB,YAAM;AACtB,OAAG,mCAAH,EAAwC,YAAM;AAC5C,UAAM,QAAQ,sBAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAV,CAAd;AACA,aAAO,MAAM,MAAb,EAAqB,cAArB,CAAoC,oBAAU,IAA9C;AACA,aAAO,MAAM,MAAN,CAAa,OAAb,EAAP,EAA+B,OAA/B,CAAuC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvC;AACD,KAJD;;AAMA,OAAG,8BAAH,EAAmC,YAAM;AACvC,aAAO;AAAA,eAAM,sBAAU,IAAV,CAAN;AAAA,OAAP,EAA8B,OAA9B,CAAsC,SAAtC;AACD,KAFD;AAGD,GAVD;;AAYA,WAAS,YAAT,EAAuB,YAAM;AAC3B,OAAG,0CAAH,EAA+C,YAAM;AACnD,UAAM,aAAa,2BACjB,oBAAU,UAAV,CAAqB,EAAC,GAAG,oBAAU,UAAV,CAAqB,EAAC,GAAG,sBAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV,CAAJ,EAArB,CAAJ,EAArB,CADiB,CAAnB;;AAGA,aAAO,WAAW,MAAlB,EAA0B,cAA1B,CAAyC,oBAAU,UAAnD;AACA,aAAO,WAAW,MAAX,CAAkB,IAAzB,EAA+B,OAA/B,CAAuC,CAAvC;AACA,aAAO,WAAW,MAAX,CAAkB,GAAlB,CAAsB,GAAtB,CAAP,EAAmC,cAAnC,CAAkD,oBAAU,UAA5D;AACA,aAAO,WAAW,MAAX,CAAkB,GAAlB,CAAsB,GAAtB,EAA2B,IAAlC,EAAwC,OAAxC,CAAgD,CAAhD;AACA,aAAO,WAAW,MAAX,CAAkB,GAAlB,CAAsB,GAAtB,EAA2B,GAA3B,CAA+B,GAA/B,CAAP,EAA4C,cAA5C,CAA2D,oBAAU,IAArE;AACA,aAAO,WAAW,MAAX,CAAkB,GAAlB,CAAsB,GAAtB,EAA2B,GAA3B,CAA+B,GAA/B,EAAoC,OAApC,EAAP,EAAsD,OAAtD,CAA8D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA9D;AACD,KAVD;;AAYA,OAAG,8BAAH,EAAmC,YAAM;AACvC,aAAO;AAAA,eAAM,2BAAe,GAAf,CAAN;AAAA,OAAP,EAAkC,OAAlC,CAA0C,SAA1C;AACD,KAFD;;AAIA,OAAG,gDAAH,EAAqD,YAAM;AACzD,UAAM,aAAa,2BACjB,oBAAU,UAAV,CAAqB,EAAC,GAAG,oBAAU,UAAV,CAAqB,EAAC,GAAG,sBAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV,CAAJ,EAArB,CAAJ,EAArB,CADiB,CAAnB;;AAGA,UAAM,cAAc,WAAW,GAAX,CAAe,GAAf,CAApB;AACA,aAAO,WAAP,EAAoB,cAApB;;AAEA,UAAM,cAAc,YAAY,GAAZ,CAAgB,GAAhB,CAApB;AACA,aAAO,WAAP,EAAoB,cAApB;AACA,aAAO,YAAY,MAAZ,CAAmB,OAAnB,EAAP,EAAqC,OAArC,CAA6C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA7C;;AAEA,UAAM,QAAQ,YAAY,GAAZ,CAAgB,CAAhB,CAAd;AACA,aAAO,KAAP,EAAc,OAAd,CAAsB,CAAtB;AACD,KAbD;AAcD,GA/BD;AAgCD,CA7CD","file":"multiindex.js","sourcesContent":["/**\n * Created by michael on 3/22/17.\n */\n\nimport Immutable from 'immutable';\n\nimport { Index, MultiIndex } from '../../core/multiindex';\n\n\ndescribe('multiindex', () => {\n  describe('Index', () => {\n    it('initializes with an Array or List', () => {\n      const index = new Index([1, 2, 3, 4]);\n      expect(index.values).toBeInstanceOf(Immutable.List);\n      expect(index.values.toArray()).toEqual([1, 2, 3, 4]);\n    });\n\n    it('throws a TypeError otherwise', () => {\n      expect(() => new Index('hi')).toThrow(TypeError);\n    })\n  });\n\n  describe('MultiIndex', () => {\n    it('initializes with an Immutable.OrderedMap', () => {\n      const multiindex = new MultiIndex(\n        Immutable.OrderedMap({1: Immutable.OrderedMap({2: new Index([1, 2, 3])})}));\n\n      expect(multiindex.values).toBeInstanceOf(Immutable.OrderedMap);\n      expect(multiindex.values.size).toEqual(1);\n      expect(multiindex.values.get('1')).toBeInstanceOf(Immutable.OrderedMap);\n      expect(multiindex.values.get('1').size).toEqual(1);\n      expect(multiindex.values.get('1').get('2')).toBeInstanceOf(Immutable.List);\n      expect(multiindex.values.get('1').get('2').toArray()).toEqual([1, 2, 3]);\n    });\n\n    it('throws a TypeError otherwise', () => {\n      expect(() => new MultiIndex('1')).toThrow(TypeError);\n    });\n\n    it('get returns the Index or MultiIndex at the key', () => {\n      const multiindex = new MultiIndex(\n        Immutable.OrderedMap({1: Immutable.OrderedMap({2: new Index([1, 2, 3])})}));\n\n      const multiindex1 = multiindex.get('1');\n      expect(multiindex1).toBeInstanceOf(MultiIndex);\n\n      const multiindex2 = multiindex1.get('2');\n      expect(multiindex2).toBeInstanceOf(Index);\n      expect(multiindex2.values.toArray()).toEqual([1, 2, 3]);\n\n      const index = multiindex2.get(1);\n      expect(index).toEqual(2);\n    });\n  });\n});\n"]}