{"version":3,"sources":["../../../es6/__tests__/core/frame.js"],"names":[],"mappings":"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","file":"frame.js","sourcesContent":["import Immutable from 'immutable';\n\nimport DataFrame, {mergeDataFrame} from '../../core/frame';\nimport Series from '../../core/series';\nimport { Workbook } from '../../core/structs';\nimport {IndexMismatchError} from '../../core/exceptions';\n\n\ndescribe('frame', () => {\n  describe('DataFrame', () => {\n    it('initializes a DataFrame', () => {\n      const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n\n      expect(df1.get('x')).toBeInstanceOf(Series);\n      expect(df1.get('x').values.toArray()).toEqual([1, 2]);\n      expect(df1.get('y')).toBeInstanceOf(Series);\n      expect(df1.get('y').values.toArray()).toEqual([2, 3]);\n    });\n\n    describe('toString', () => {\n      it('logs the DataFrame properly', () => {\n        const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n        df1.columns = ['date', 'unemployment_rate_x'];\n        const df2 = new DataFrame([{x: 1, y: 3}, {x: 2, y: 4}]);\n        df2.columns = ['date', 'unemployment_rate_y'];\n\n        df1.merge(df2, ['date']).toString();\n      });\n    });\n\n    describe('set', () => {\n      it('sets a new Series column at the index', () => {\n        const df = new DataFrame([{x: 1}, {x: 2}, {x: 3}]);\n        const df2 = df.set('y', new Series([2, 3, 4]));\n        expect(df2.get('y').values.toArray()).toEqual([2, 3, 4]);\n      });\n\n      it('sets a new List column at the index', () => {\n        const df = new DataFrame([{x: 1}, {x: 2}, {x: 3}]);\n        const df2 = df.set('y', Immutable.List([2, 3, 4]));\n        expect(df2.get('y').values.toArray()).toEqual([2, 3, 4]);\n      });\n\n      it('sets a new Array column at the index', () => {\n        const df = new DataFrame([{x: 1}, {x: 2}, {x: 3}]);\n        const df2 = df.set('y', [2, 3, 4]);\n        expect(df2.get('y').values.toArray()).toEqual([2, 3, 4]);\n      });\n    });\n\n    describe('index', () => {\n      it('index is set properly as the [0, ..., length - 1] if not passed in constructor', () => {\n        const df1 = new DataFrame([{x: 1.5}, {x: 1.2}, {x: 1.3}]);\n        expect(df1.index.toArray()).toEqual([0, 1, 2]);\n      });\n\n      it('index is set properly as the index array passed in in constructor', () => {\n        const df1 = new DataFrame([{x: 1.5}, {x: 1.2}, {x: 1.3}], {index: [1, 2, 3]});\n        expect(df1.index.toArray()).toEqual([1, 2, 3]);\n      });\n\n      it('index is set properly as the index List passed in in constructor', () => {\n        const df1 = new DataFrame([{x: 1.5}, {x: 1.2}, {x: 1.3}],\n          {index: Immutable.List([1, 2, 3])});\n        expect(df1.index.toArray()).toEqual([1, 2, 3]);\n      });\n\n      it('throws IndexMismatchError if the index does not match', () => {\n        const f = () => new DataFrame([{x: 1.5}, {x: 1.2}, {x: 1.3}],\n          {index: Immutable.List([1, 2, 3, 4])});\n        expect(f).toThrowError(IndexMismatchError);\n      });\n\n      it('index setter updates the index if proper length array passed in', () => {\n        const df1 = new DataFrame([{x: 1.5}, {x: 1.2}, {x: 1.3}],\n          {index: Immutable.List([1, 2, 3])});\n        df1.index = Immutable.List([2, 3, 4]);\n\n        expect(df1.index.toArray()).toEqual([2, 3, 4]);\n        expect(df1.get('x').index.toArray()).toEqual([2, 3, 4]);\n      });\n\n      it('throws IndexMismatchError in setter if index does not match', () => {\n        const df1 = new DataFrame([{x: 1.5}, {x: 1.2}, {x: 1.3}],\n          {index: Immutable.List([1, 2, 3])});\n        const f = () => {\n          df1.index = Immutable.List([2, 3, 4, 5]);\n        };\n        expect(f).toThrowError(IndexMismatchError);\n      });\n    });\n\n    describe('columns', () => {\n      it('columns are set properly', () => {\n        const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n        expect(df1.columns.toArray()).toEqual(['x', 'y']);\n      });\n\n      it('new columns of equal length can be set', () => {\n        const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n        df1.columns = ['a', 'x'];\n\n        expect(df1.columns.toArray()).toEqual(['a', 'x']);\n        expect(df1.get('a')).toBeInstanceOf(Series);\n        expect(df1.get('x')).toBeInstanceOf(Series);\n        expect(df1.get('x').values.toArray()).toEqual([2, 3]);\n      });\n    });\n\n    describe('get', () => {\n      it('gets one column as a Series when string passed in', () => {\n        const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n        const ds = df.get('y');\n        expect(ds).toBeInstanceOf(Series);\n        expect(ds.values.toArray()).toEqual([2, 3, 4]);\n      });\n\n      it('gets multiple columns as a DataFrame when Iterable of strings passed in', () => {\n        const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n        const df2 = df.get(['y', 'z']);\n        expect(df2).toBeInstanceOf(DataFrame);\n        expect(df2.columns.toArray()).toEqual(['y', 'z']);\n        expect(df2.get('y').values.toArray()).toEqual([2, 3, 4]);\n        expect(df2.get('z').values.toArray()).toEqual([3, 4, 5]);\n      })\n    });\n\n    describe('reset_index', () => {\n      it('resets the index to a range and places \"index\" as a column in the DataFrame', () => {\n        const df = new DataFrame(\n          [{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}],\n          {index: [1, 2, 3]}).reset_index();\n\n        expect(df.get('index')).toBeInstanceOf(Series);\n        expect(df.get('index').values.toArray()).toEqual([1, 2, 3]);\n        expect(df.get('y').values.toArray()).toEqual([2, 3, 4]);\n        expect(df.index.toArray()).toEqual([0, 1, 2]);\n      });\n\n      it('resets the index to a range and does not include \"index\" in the DataFrame', () => {\n        const df = new DataFrame(\n          [{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}],\n          {index: [1, 2, 3]}).reset_index({drop: true});\n\n        expect(df.columns.toArray()).toEqual(['x', 'y', 'z']);\n        expect(df.index.toArray()).toEqual([0, 1, 2]);\n      });\n\n      it('resets the index to a range and includes \"level_0\" in the DataFrame', () => {\n        const df = new DataFrame(\n          [{index: 1, y: 2, z: 3}, {index: 2, y: 3, z: 4}, {index: 3, y: 4, z: 5}],\n          {index: [2, 3, 4]}).reset_index();\n\n        expect(df.get('index')).toBeInstanceOf(Series);\n        expect(df.get('index').values.toArray()).toEqual([1, 2, 3]);\n        expect(df.get('level_0')).toBeInstanceOf(Series);\n        expect(df.get('level_0').values.toArray()).toEqual([2, 3, 4]);\n        expect(df.index.toArray()).toEqual([0, 1, 2]);\n      });\n    });\n\n    describe('head', () => {\n      it('returns the first n rows as a new DataFrame', () => {\n        const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 5}]);\n\n        const df2 = df.head(2);\n        expect(df2.shape.toArray()).toEqual([2, 2]);\n        expect(df2.get('x').values.toArray()).toEqual([1, 2]);\n        expect(df2.index.toArray()).toEqual([0, 1]);\n      });\n    });\n\n    describe('tail', () => {\n      it('returns the last n rows as a new DataFrame', () => {\n        const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 5}]);\n\n        const df2 = df.tail(2);\n        expect(df2.shape.toArray()).toEqual([2, 2]);\n        expect(df2.get('x').values.toArray()).toEqual([3, 4]);\n        expect(df2.index.toArray()).toEqual([2, 3]);\n      });\n    });\n\n    it('measures length properly', () => {\n      const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n      expect(df1.length).toEqual(3);\n    });\n\n    it('Is iterable via iterrows', () => {\n      const vals = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}];\n      const df1 = new DataFrame(vals);\n\n      for (const [row, idx] of df1.iterrows()) {\n        expect(row).toBeInstanceOf(Immutable.Map);\n        expect(row.get('x')).toEqual(vals[idx].x);\n        expect(row.get('y')).toEqual(vals[idx].y);\n      }\n    });\n\n    describe('sum', () => {\n      it('sums along axis 0', () => {\n        const df1 = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 10}]);\n        const ds_sum = df1.sum();\n        expect(ds_sum).toBeInstanceOf(Series);\n        expect(ds_sum.values.toArray()).toEqual([3, 5, 13]);\n        expect(ds_sum.index.toArray()).toEqual(['x', 'y', 'z']);\n      });\n\n      it('sums along axis 1', () => {\n        const df1 = new DataFrame(\n          [{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 10}],\n          {index: [2, 3]});\n        const ds_sum = df1.sum(1);\n        expect(ds_sum).toBeInstanceOf(Series);\n        expect(ds_sum.values.toArray()).toEqual([6, 15]);\n        expect(ds_sum.index.toArray()).toEqual([2, 3]);\n      });\n    });\n\n    describe('mean', () => {\n      it('takes mean along axis 0', () => {\n        const df1 = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 10}]);\n        const ds_sum = df1.mean();\n        expect(ds_sum).toBeInstanceOf(Series);\n        expect(ds_sum.values.toArray()).toEqual([1.5, 2.5, 6.5]);\n        expect(ds_sum.index.toArray()).toEqual(['x', 'y', 'z']);\n      });\n\n      it('takes mean along axis 1', () => {\n        const df1 = new DataFrame(\n          [{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 10}],\n          {index: [2, 3]});\n        const ds_mean = df1.mean(1);\n        expect(ds_mean).toBeInstanceOf(Series);\n        expect(ds_mean.values.toArray()).toEqual([2, 5]);\n        expect(ds_mean.index.toArray()).toEqual([2, 3]);\n      });\n    });\n\n    describe('variance', () => {\n      it('takes variance along axis 0', () => {\n        const df1 = new DataFrame([{x: 1, y: 1}, {x: 2, y: 3}, {x: 3, y: 5}]);\n        const ds_var = df1.variance();\n        expect(ds_var).toBeInstanceOf(Series);\n        expect(ds_var.values.toArray()).toEqual([1, 4]);\n        expect(ds_var.index.toArray()).toEqual(['x', 'y']);\n      });\n\n      it('takes variance along axis 1', () => {\n        const df1 = new DataFrame(\n          [{x: 1, y: 1, z: 1}, {x: 2, y: 3, z: 4}],\n          {index: [2, 3]});\n        const ds_var = df1.variance(1);\n        expect(ds_var).toBeInstanceOf(Series);\n        expect(ds_var.values.toArray()).toEqual([0, 1]);\n        expect(ds_var.index.toArray()).toEqual([2, 3]);\n      });\n    });\n\n    describe('std', () => {\n      it('takes standard deviation along axis 0', () => {\n        const df1 = new DataFrame([{x: 1, y: 1}, {x: 2, y: 3}, {x: 3, y: 5}]);\n        const ds_std = df1.std();\n        expect(ds_std).toBeInstanceOf(Series);\n        expect(ds_std.values.toArray()).toEqual([1, 2]);\n        expect(ds_std.index.toArray()).toEqual(['x', 'y']);\n      });\n\n      it('takes standard deviation along axis 1', () => {\n        const df1 = new DataFrame(\n          [{x: 1, y: 1, z: 1}, {x: 2, y: 3, z: 4}],\n          {index: [2, 3]});\n        const ds_std = df1.std(1);\n        expect(ds_std).toBeInstanceOf(Series);\n        expect(ds_std.values.toArray()).toEqual([0, 1]);\n        expect(ds_std.index.toArray()).toEqual([2, 3]);\n      });\n    });\n  });\n\n  describe('mergeDataFrame', () => {\n    describe('innerMerge', () => {\n      it('merges two DataFrames on a given key', () => {\n        const vals1 = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 10}];\n        const df1 = new DataFrame(vals1);\n        const vals2 = [{x: 2, z: 6}, {x: 1, z: 1}, {x: 3, z: 100}];\n        const df2 = new DataFrame(vals2);\n\n        const df3 = mergeDataFrame(df1, df2, ['x'], 'inner');\n        expect(df3).toBeInstanceOf(DataFrame);\n        expect(df3.length).toEqual(3);\n        expect(df3.get('x').values.toArray()).toEqual([1, 2, 3]);\n        expect(df3.get('y').values.toArray()).toEqual([2, 3, 4]);\n        expect(df3.get('z').values.toArray()).toEqual([1, 6, 100]);\n      });\n\n      it('replaces a common column with _x and _y', () => {\n        const vals1 = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 10}];\n        const df1 = new DataFrame(vals1);\n        const vals2 = [{x: 2, y: 6}, {x: 1, y: 1}, {x: 3, y: 100}];\n        const df2 = new DataFrame(vals2);\n\n        const df3 = mergeDataFrame(df1, df2, ['x'], 'inner');\n        expect(df3).toBeInstanceOf(DataFrame);\n        expect(df3.length).toEqual(3);\n        expect(df3.get('x').values.toArray()).toEqual([1, 2, 3]);\n        expect(df3.get('y_x').values.toArray()).toEqual([2, 3, 4]);\n        expect(df3.get('y_y').values.toArray()).toEqual([1, 6, 100]);\n      });\n\n      it('merges on a date column', () => {\n        const vals1 = [\n          {date: '01-01-2010', unemployment_rate: 2},\n          {date: '01-01-2011', unemployment_rate: 3},\n          {date: '01-01-2012', unemployment_rate: 4},\n          {date: '01-01-2013', unemployment_rate: 10}];\n        const df1 = new DataFrame(vals1);\n        const vals2 = [\n          {date: '01-01-2010', unemployment_rate: 5},\n          {date: '01-01-2011', unemployment_rate: 7},\n          {date: '01-01-2012', unemployment_rate: 20},\n          {date: '01-01-2013', unemployment_rate: 23}];\n        const df2 = new DataFrame(vals2);\n\n        const df3 = mergeDataFrame(df1, df2, ['date']);\n        expect(df3).toBeInstanceOf(DataFrame);\n        expect(df3.length).toEqual(4);\n        expect(df3.get('date').values.toArray()).toEqual([\"01-01-2010\", \"01-01-2011\",\n          \"01-01-2012\", \"01-01-2013\"]);\n        expect(df3.get('unemployment_rate_x').values.toArray()).toEqual([2, 3, 4, 10]);\n        expect(df3.get('unemployment_rate_y').values.toArray()).toEqual([5, 7, 20, 23]);\n      });\n    });\n\n    describe('outerMerge', () => {\n      it('merges two DataFrames on a given key', () => {\n        const vals1 = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 10}];\n        const df1 = new DataFrame(vals1);\n        const vals2 = [{x: 2, z: 6}, {x: 1, z: 1}, {x: 3, z: 100}, {x: 5, z: 200}];\n        const df2 = new DataFrame(vals2);\n\n        const df3 = mergeDataFrame(df1, df2, ['x'], 'outer');\n        expect(df3).toBeInstanceOf(DataFrame);\n        expect(df3.length).toEqual(5);\n        expect(df3.get('x').values.toArray()).toEqual([1, 2, 3, 4, 5]);\n        expect(df3.get('y').values.toArray()).toEqual([2, 3, 4, 10, null]);\n        expect(df3.get('z').values.toArray()).toEqual([1, 6, 100, null, 200]);\n      });\n    });\n  });\n\n  describe('values', () => {\n    it('values returns an Immutable.List of Immutable.Lists with [row][column] indexing', () => {\n      const vals1 = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 10}];\n      const df1 = new DataFrame(vals1);\n\n      expect(df1.values).toBeInstanceOf(Immutable.List);\n      df1.values.forEach((r, idx) => {\n        expect(r).toBeInstanceOf(Immutable.List);\n        expect(r.get(0)).toEqual(vals1[idx].x);\n        expect(r.get(1)).toEqual(vals1[idx].y);\n      });\n    });\n\n    it('values equality check is true if data is unchanged', () => {\n      const vals1 = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 10}];\n      const df1 = new DataFrame(vals1);\n\n      expect(df1.values === df1.values).toEqual(true);\n    });\n  });\n\n  describe('merge', () => {\n    it('merges a second DataFrame to this instance on a given key', () => {\n      // n = 10  : .014s\n      // n = 25  : .037s\n      // n = 50  : .11s\n      // n = 100 : .38s\n      // n = 200 : 3.2s\n      // n = 300 : 5.1s\n      // n = 400 : 8.5s\n      // n = 800 : 35.7s\n      const n = 25;\n      const xSeries = new Series(Immutable.Range(0, n).toList());\n      const ySeries = new Series(Immutable.Range(1, n + 1).toList());\n      const zSeries = new Series(Immutable.Range(n + 2, 2, -1).toList());\n      const df1 = new DataFrame(Immutable.Map({x: xSeries, y: ySeries}));\n      const df2 = new DataFrame(Immutable.Map({x: xSeries, z: zSeries}));\n\n      const df3 = df1.merge(df2, ['x']);\n      expect(df3).toBeInstanceOf(DataFrame);\n      expect(df3.length).toEqual(25);\n      expect(df3.get('x').values.toArray()).toEqual(xSeries.values.toArray());\n      expect(df3.get('y').values.toArray()).toEqual(ySeries.values.toArray());\n      expect(df3.get('z').values.toArray()).toEqual(zSeries.values.toArray());\n    });\n\n    it('merges a second DataFrame after columns are renamed', () => {\n      const vals1 = [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 10}];\n      const df1 = new DataFrame(vals1);\n      df1.columns = ['x', 'a'];\n      const vals2 = [{x: 2, z: 6}, {x: 1, z: 1}, {x: 3, z: 100}];\n      const df2 = new DataFrame(vals2);\n      df2.columns = ['x', 'b'];\n\n      const df3 = df1.merge(df2, ['x']);\n      expect(df3).toBeInstanceOf(DataFrame);\n      expect(df3.length).toEqual(3);\n      expect(df3.get('x').values.toArray()).toEqual([1, 2, 3]);\n      expect(df3.get('a').values.toArray()).toEqual([2, 3, 4]);\n      expect(df3.get('b').values.toArray()).toEqual([1, 6, 100]);\n    });\n  });\n\n  describe('to_csv', () => {\n    it('converts a pandas.DataFrame to a properly formatted csv string', () => {\n      const vals1 = [{x: 1, y: 2}, {x: 3, y: 3}, {x: 4, y: 8}];\n      const df1 = new DataFrame(vals1);\n\n      expect(df1.to_csv()).toEqual('x,y,\\r\\n1,2,\\r\\n3,3,\\r\\n4,8,\\r\\n');\n\n      for (let [r, idx] of df1.iterrows()) {\n        // console.log(r.values);\n      }\n    });\n  });\n\n  describe('to_excel', () => {\n    it('converts a pandas DataFrame to a properly formatted Excel file', () => {\n      // TODO\n    });\n  });\n\n  describe('to_json', () => {\n    it('converts a pandas DataFrame to a json object when orient=\"columns\"', () => {\n      const df = new DataFrame(Immutable.Map({x: new Series([1, 2, 3]), y: new Series([2, 3, 4])}));\n\n      const dfJSON = df.to_json();\n      expect(dfJSON).toEqual({x: {0: 1, 1: 2, 2: 3}, y: {0: 2, 1: 3, 2: 4}});\n    });\n\n    it('converts a pandas DataFrame to a json object when orient=\"records\"', () => {\n      const df = new DataFrame(Immutable.Map({x: new Series([1, 2, 3]), y: new Series([2, 3, 4])}));\n\n      const dfJSON = df.to_json({orient: 'records'});\n      expect(dfJSON).toBeInstanceOf(Array);\n      expect(dfJSON[0]).toEqual({x: 1, y: 2});\n      expect(dfJSON[1]).toEqual({x: 2, y: 3});\n      expect(dfJSON[2]).toEqual({x: 3, y: 4});\n    });\n\n    it('converts a pandas DataFrame to a json object when orient=\"split\"', () => {\n      const df = new DataFrame(Immutable.Map({x: new Series([1, 2, 3]), y: new Series([2, 3, 4])}));\n\n      const dfJSON = df.to_json({orient: 'split'});\n      expect(dfJSON).toBeInstanceOf(Object);\n      expect(dfJSON.columns).toEqual(['x', 'y']);\n      expect(dfJSON.index).toEqual([0, 1, 2]);\n      expect(dfJSON.values).toEqual([[1, 2], [2, 3], [3, 4]]);\n    });\n\n    it('converts a pandas DataFrame to a json object when orient=\"index\"', () => {\n      const df = new DataFrame(Immutable.Map({x: new Series([1, 2, 3]), y: new Series([2, 3, 4])}));\n\n      const dfJSON = df.to_json({orient: 'index'});\n      expect(dfJSON).toBeInstanceOf(Object);\n      expect(dfJSON).toEqual({\n        0: {x: 1, y: 2},\n        1: {x: 2, y: 3},\n        2: {x: 3, y: 4},\n      });\n    });\n\n    it('converts a pandas DataFrame to a json object when orient=\"values\"', () => {\n      const df = new DataFrame(Immutable.Map({x: new Series([1, 2, 3]), y: new Series([2, 3, 4])}));\n\n      const dfJSON = df.to_json({orient: 'values'});\n      expect(dfJSON).toBeInstanceOf(Object);\n      expect(dfJSON).toEqual([[1, 2], [2, 3], [3, 4]]);\n    });\n  });\n\n  describe('where', () => {\n    it('checks for equality of a scalar and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.where(1, (a, b) => a === b);\n\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, false]);\n    });\n\n    it('checks for equality of a Series and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.where(new Series([1, 3]), (a, b) => a === b);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, true]);\n    });\n\n    it('checks for equality of a DataFrame and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.where(new DataFrame([{a: 2, b: 2}, {a: 2, b: 2}]), (a, b) => a === b);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, true]);\n      expect(df2.get('y').values.toArray()).toEqual([true, false]);\n    });\n  });\n\n  describe('eq', () => {\n    it('checks for equality of a scalar and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.eq(1);\n\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, false]);\n    });\n\n    it('checks for equality of a Series and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.eq(new Series([1, 3]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, true]);\n    });\n\n    it('checks for equality of a DataFrame and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.eq(new DataFrame([{a: 2, b: 2}, {a: 2, b: 2}]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, true]);\n      expect(df2.get('y').values.toArray()).toEqual([true, false]);\n    });\n  });\n\n  describe('gt', () => {\n    it('checks for greater than of a scalar and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.gt(1);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, true]);\n      expect(df2.get('y').values.toArray()).toEqual([true, true]);\n    });\n\n    it('checks for greater than of a Series and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.gt(new Series([1, 3]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, false]);\n      expect(df2.get('y').values.toArray()).toEqual([true, false]);\n    });\n\n    it('checks for greater than of a DataFrame and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.gt(new DataFrame([{a: 2, b: 2}, {a: 2, b: 2}]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, true]);\n    });\n  });\n\n  describe('gte', () => {\n    it('checks for greater than or equal of a scalar and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.gte(1);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, true]);\n      expect(df2.get('y').values.toArray()).toEqual([true, true]);\n    });\n\n    it('checks for greater than or equal of a Series and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.gte(new Series([1, 3]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([true, true]);\n    });\n\n    it('checks for greater than or equal of a DataFrame and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.gte(new DataFrame([{a: 2, b: 2}, {a: 2, b: 2}]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, true]);\n      expect(df2.get('y').values.toArray()).toEqual([true, true]);\n    });\n  });\n\n  describe('lt', () => {\n    it('checks for less than of a scalar and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.lt(1);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, false]);\n    });\n\n    it('checks for less than of a Series and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.lt(new Series([1, 3]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([false, true]);\n      expect(df2.get('y').values.toArray()).toEqual([false, false]);\n    });\n\n    it('checks for less than of a DataFrame and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.lt(new DataFrame([{a: 2, b: 2}, {a: 2, b: 2}]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, false]);\n    });\n  });\n\n  describe('lte', () => {\n    it('checks for less than or equal of a scalar and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.lte(1);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, false]);\n      expect(df2.get('y').values.toArray()).toEqual([false, false]);\n    });\n\n    it('checks for less than or equal of a Series and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.lte(new Series([1, 3]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, true]);\n      expect(df2.get('y').values.toArray()).toEqual([false, true]);\n    });\n\n    it('checks for less than or equal of a DataFrame and returns a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.lte(new DataFrame([{a: 2, b: 2}, {a: 2, b: 2}]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([true, true]);\n      expect(df2.get('y').values.toArray()).toEqual([true, false]);\n    });\n  });\n\n  describe('filter', () => {\n    it('takes a Series boolean and returns the subset of the DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.filter(df.get('x').gt(1));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([2]);\n      expect(df2.get('y').values.toArray()).toEqual([3]);\n    });\n\n    it('takes a Array boolean and returns the subset of the DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.filter([false, true]);\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([2]);\n      expect(df2.get('y').values.toArray()).toEqual([3]);\n    });\n\n    it('takes a List boolean and returns the subset of the DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n      const df2 = df.filter(Immutable.List([false, true]));\n\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([2]);\n      expect(df2.get('y').values.toArray()).toEqual([3]);\n    });\n  });\n\n  describe('cov', () => {\n    it('calculates the covariance of all Series in a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 1, z: 5}, {x: 3, y: 0, z: 7}]);\n\n      const dfCov = df.cov();\n\n      expect(dfCov.get('x').values.toArray()).toEqual([1, -1, 2]);\n      expect(dfCov.get('y').values.toArray()).toEqual([-1, 1, -2]);\n      expect(dfCov.get('z').values.toArray()).toEqual([2, -2, 4]);\n    });\n  });\n\n  describe('corr', () => {\n    it('calculates the correlation of all Series in a DataFrame', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 1, z: 5}, {x: 3, y: 0, z: 7}]);\n\n      const dfCorr = df.corr();\n\n      expect(dfCorr.get('x').values.toArray()).toEqual([1, -1, 1]);\n      expect(dfCorr.get('y').values.toArray()).toEqual([-1, 1, -1]);\n      expect(dfCorr.get('z').values.toArray()).toEqual([1, -1, 1]);\n    });\n  });\n\n  describe('diff', () => {\n    it('calculates the diff along axis 0', () => {\n      const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n\n      const df2 = df1.diff();\n      expect(df2.get('x').values.toArray()).toEqual([null, 1, 1]);\n      expect(df2.get('y').values.toArray()).toEqual([null, 1, 1]);\n      expect(df2.index.toArray()).toEqual([2, 3, 4]);\n    });\n\n    it('calculates the diff along axis 1', () => {\n      const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n\n      const df2 = df1.diff(1, 1);\n      expect(df2.values.get(0).toArray()).toEqual([null, 1]);\n      expect(df2.values.get(1).toArray()).toEqual([null, 1]);\n      expect(df2.values.get(2).toArray()).toEqual([null, 1]);\n      expect(df2.columns.toArray()).toEqual(['x', 'y']);\n    });\n  });\n\n  describe('pct_change', () => {\n    it('calculates the pct_change along axis 0', () => {\n      const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n\n      const df2 = df1.pct_change();\n      expect(df2.get('x').values.toArray()).toEqual([null, 1, 0.5]);\n      expect(df2.get('y').values.toArray()).toEqual([null, 0.5, (4 / 3) - 1]);\n      expect(df2.index.toArray()).toEqual([2, 3, 4]);\n    });\n\n    it('calculates the pct_change along axis 1', () => {\n      const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n\n      const df2 = df1.pct_change(1, 1);\n      expect(df2.values.get(0).toArray()).toEqual([null, 1]);\n      expect(df2.values.get(1).toArray()).toEqual([null, 0.5]);\n      expect(df2.values.get(2).toArray()).toEqual([null, (4 / 3) - 1]);\n      expect(df2.columns.toArray()).toEqual(['x', 'y']);\n    });\n  });\n\n  describe('pivot', () => {\n    it('pivots a DataFrame with unique index, column pairs', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 1, z: 1}]);\n\n      let dfPv = df.pivot('x', 'y', 'z');\n\n      expect(dfPv).toBeInstanceOf(DataFrame);\n\n      expect(dfPv.get(1).values.toArray()).toEqual([null, 1]);\n      expect(dfPv.get(2).values.toArray()).toEqual([3, null]);\n\n      dfPv = df.pivot('z', 'x', 'y');\n\n      expect(dfPv).toBeInstanceOf(DataFrame);\n      expect(dfPv.get(1).values.toArray()).toEqual([null, 2]);\n      expect(dfPv.get(2).values.toArray()).toEqual([1, null]);\n    });\n\n    it('throws an error if column not in df', () => {\n      const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n\n      expect(() => df.pivot('x', 'y', 'z')).toThrow();\n    });\n\n    it('throws an error if index or column not unique', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 1, y: 2, z: 4}]);\n\n      expect(() => df.pivot('x', 'y', 'z')).toThrow();\n    });\n\n    it('properly sorts columns', () => {\n      const data = JSON.parse(\"[\" +\n        \"{\\\"name\\\":\\\"Boston, MA - Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":0,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Cambridge-Newton-Framingham, MA - Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":1,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Worcester, MA-CT - Not Hispanic - Black\\\",\\\"val\\\":4,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Worcester, MA-CT - Not Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":9,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Cambridge-Newton-Framingham, MA - Hispanic - Black\\\",\\\"val\\\":16,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Boston, MA - Hispanic - Black\\\",\\\"val\\\":25,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Providence-Warwick, RI-MA - Not Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":36,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Providence-Warwick, RI-MA - Hispanic - Black\\\",\\\"val\\\":49,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Boston, MA - Not Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":64,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Cambridge-Newton-Framingham, MA - Not Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":81,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Worcester, MA-CT - Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":100,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Worcester, MA-CT - Hispanic - Black\\\",\\\"val\\\":121,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Cambridge-Newton-Framingham, MA - Not Hispanic - Black\\\",\\\"val\\\":144,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Boston, MA - Not Hispanic - Black\\\",\\\"val\\\":169,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Providence-Warwick, RI-MA - Hispanic - American Indian or Alaska Native\\\",\\\"val\\\":196,\\\"idx\\\":1},\" +\n        \"{\\\"name\\\":\\\"Providence-Warwick, RI-MA - Not Hispanic - Black\\\",\\\"val\\\":225,\\\"idx\\\":1}]\");\n      const df = new DataFrame(data);\n\n      const dfPv = df.pivot('idx', 'name', 'val');\n      expect(dfPv.columns.toArray()).toEqual([ 'Boston, MA - Hispanic - American Indian or Alaska Native',\n        'Boston, MA - Hispanic - Black',\n        'Boston, MA - Not Hispanic - American Indian or Alaska Native',\n        'Boston, MA - Not Hispanic - Black',\n        'Cambridge-Newton-Framingham, MA - Hispanic - American Indian or Alaska Native',\n        'Cambridge-Newton-Framingham, MA - Hispanic - Black',\n        'Cambridge-Newton-Framingham, MA - Not Hispanic - American Indian or Alaska Native',\n        'Cambridge-Newton-Framingham, MA - Not Hispanic - Black',\n        'Providence-Warwick, RI-MA - Hispanic - American Indian or Alaska Native',\n        'Providence-Warwick, RI-MA - Hispanic - Black',\n        'Providence-Warwick, RI-MA - Not Hispanic - American Indian or Alaska Native',\n        'Providence-Warwick, RI-MA - Not Hispanic - Black',\n        'Worcester, MA-CT - Hispanic - American Indian or Alaska Native',\n        'Worcester, MA-CT - Hispanic - Black',\n        'Worcester, MA-CT - Not Hispanic - American Indian or Alaska Native',\n        'Worcester, MA-CT - Not Hispanic - Black' ]);\n    });\n  });\n\n  describe('iloc', () => {\n    it('.iloc(1, 1) returns a DataFrame of shape [1, 1]', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n      const df2 = df.iloc(1, 1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.shape.toArray()).toEqual([1, 1]);\n      expect(df2.columns.toArray()).toEqual(['y']);\n      expect(df2.get('y').length).toEqual(1);\n      expect(df2.get('y').iloc(0)).toEqual(3);\n\n      expect(df2.index.toArray()).toEqual([1]);\n    });\n\n    it('.iloc(1, [1, 3]) returns a DataFrame of shape [1, 2]', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n      const df2 = df.iloc(1, [1, 3]);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.shape.toArray()).toEqual([1, 2]);\n      expect(df2.columns.toArray()).toEqual(['y', 'z']);\n      expect(df2.get('y').length).toEqual(1);\n      expect(df2.get('y').iloc(0)).toEqual(3);\n      expect(df2.get('z').length).toEqual(1);\n      expect(df2.get('z').iloc(0)).toEqual(4);\n\n      expect(df2.index.toArray()).toEqual([1]);\n    });\n\n    it('.iloc(1) returns a DataFrame of shape [1, 3]', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n      const df2 = df.iloc(1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.shape.toArray()).toEqual([1, 3]);\n      expect(df2.columns.toArray()).toEqual(['x', 'y', 'z']);\n      expect(df2.get('x').length).toEqual(1);\n      expect(df2.get('x').iloc(0)).toEqual(2);\n      expect(df2.get('y').length).toEqual(1);\n      expect(df2.get('y').iloc(0)).toEqual(3);\n      expect(df2.get('z').length).toEqual(1);\n      expect(df2.get('z').iloc(0)).toEqual(4);\n\n      expect(df2.index.toArray()).toEqual([1]);\n    });\n\n    it('.iloc([1, 3], 1) returns a DataFrame of shape [2, 1]', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n      const df2 = df.iloc([1, 3], 1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.shape.toArray()).toEqual([2, 1]);\n      expect(df2.columns.toArray()).toEqual(['y']);\n      expect(df2.get('y').length).toEqual(2);\n      expect(df2.get('y').values.toArray()).toEqual([3, 4]);\n\n      expect(df2.index.toArray()).toEqual([1, 2]);\n    });\n\n    it('.iloc([1, 3], [1, 3]) returns a DataFrame of shape [2, 2]', () => {\n      const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n\n      const df2 = df.iloc([1, 3], [1, 3]);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.shape.toArray()).toEqual([2, 2]);\n      expect(df2.columns.toArray()).toEqual(['y', 'z']);\n      expect(df2.get('y').length).toEqual(2);\n      expect(df2.get('y').values.toArray()).toEqual([3, 4]);\n      expect(df2.get('z').length).toEqual(2);\n      expect(df2.get('z').values.toArray()).toEqual([4, 5]);\n\n      expect(df2.index.toArray()).toEqual([1, 2]);\n    });\n  });\n\n  describe('cumsum', () => {\n    it('sums along axis 0', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cumsum();\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 3, 6]);\n      expect(df2.get('y').values.toArray()).toEqual([2, 5, 9]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n\n    it('sums along axis 1', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cumsum(1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 2, 3]);\n      expect(df2.get('y').values.toArray()).toEqual([3, 5, 7]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n  });\n\n  describe('cummul', () => {\n    it('multiplies along axis 0', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cummul();\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 2, 6]);\n      expect(df2.get('y').values.toArray()).toEqual([2, 6, 24]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n\n    it('multiplies along axis 1', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cummul(1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 2, 3]);\n      expect(df2.get('y').values.toArray()).toEqual([2, 6, 12]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n  });\n\n  describe('cummin', () => {\n    it('Cumulative minimum along axis 0', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cummin();\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 1, 1]);\n      expect(df2.get('y').values.toArray()).toEqual([2, 2, 2]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n\n    it('Cumulative minimum along axis 1', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cummin(1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 2, 3]);\n      expect(df2.get('y').values.toArray()).toEqual([1, 2, 3]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n  });\n\n  describe('cummax', () => {\n    it('Cumulative maximum along axis 0', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cummax();\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([1, 2, 3]);\n      expect(df2.get('y').values.toArray()).toEqual([2, 3, 4]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n\n    it('Cumulative maximum along axis 1', () => {\n      const df = new DataFrame(\n        [{x: 2, y: 1}, {x: 2, y: 3}, {x: 7, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.cummax(1);\n      expect(df2).toBeInstanceOf(DataFrame);\n      expect(df2.get('x').values.toArray()).toEqual([2, 2, 7]);\n      expect(df2.get('y').values.toArray()).toEqual([2, 3, 7]);\n      expect(df2.index.toArray()).toEqual([1, 2, 3]);\n    });\n  });\n  //\n  // describe('pivot_table', () => {\n  //   it('pivots', () => {\n  //     const df = new DataFrame([\n  //       {a: 1, b: 1, c: 1, d: 3},\n  //       // {a: 1, b: 1, c: 1, d: 4},\n  //       {a: 1, b: 1, c: 2, d: 8},\n  //       {a: 1, b: 2, c: 1, d: 9},\n  //       {a: 1, b: 2, c: 2, d: 10},\n  //       {a: 2, b: 1, c: 1, d: 1},\n  //       {a: 2, b: 1, c: 2, d: 4},\n  //       {a: 2, b: 2, c: 1, d: 1},\n  //       {a: 2, b: 2, c: 2, d: 3},\n  //       {a: 2, b: 2, c: 2, d: 3},\n  //     ]);\n  //\n  //     console.log(df.pivot_table(['a', 'b'], 'c', 'd'));\n  //   });\n  // });\n\n  describe('rename', () => {\n    it('renames one Series in the DataFrame', () => {\n      const df = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df.rename({columns: Immutable.Map({x: 'q'})});\n\n      expect(df.columns.toArray()).toEqual(['x', 'y']);\n      expect(df2.columns.toArray()).toEqual(['q', 'y']);\n      expect(df2.get('q').values.toArray()).toEqual([1, 2, 3]);\n      expect(df2.get('q').index.toArray()).toEqual([1, 2, 3]);\n      expect(df2.get('q').name).toEqual('q');\n    });\n  });\n\n  describe('length', () => {\n    it('Has length zero when empty DataFrame', () => {\n      const df = new DataFrame();\n      expect(df.length).toEqual(0);\n\n      const df2 = new DataFrame([]);\n      expect(df2.length).toEqual(0);\n    });\n\n    it('Estimates non-zero length properly', () => {\n      const df = new DataFrame(Immutable.Map({x: new Series([1, 2, 5, 4, 3])}));\n      expect(df.length).toEqual(5);\n    });\n  });\n\n  describe('append', () => {\n    it('Appends a DataFrame to another when ignore_index is false', () => {\n      const df1 = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = new DataFrame(\n        [{x: 2, y: 2}, {x: 3, y: 3}, {x: 4, y: 4}], {index: [2, 3, 4]});\n\n      const df3 = df1.append(df2);\n      expect(df3.get('x').values.toArray()).toEqual([1, 2, 3, 2, 3, 4]);\n      expect(df3.get('y').values.toArray()).toEqual([2, 3, 4, 2, 3, 4]);\n      expect(df3.index.toArray()).toEqual([1, 2, 3, 2, 3, 4]);\n    });\n\n    it('Appends a DataFrame to another when ignore_index is true', () => {\n      const df1 = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = new DataFrame(\n        [{x: 2, y: 2}, {x: 3, y: 3}, {x: 4, y: 4}], {index: [2, 3, 4]});\n\n      const df3 = df1.append(df2, true);\n      expect(df3.get('x').values.toArray()).toEqual([1, 2, 3, 2, 3, 4]);\n      expect(df3.get('y').values.toArray()).toEqual([2, 3, 4, 2, 3, 4]);\n      expect(df3.index.toArray()).toEqual([0, 1, 2, 3, 4, 5]);\n    });\n\n    it('Appends an empty DataFrame to another', () => {\n      const df1 = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = new DataFrame([]);\n\n      const df3 = df1.append(df2);\n      expect(df3.get('x').values.toArray()).toEqual([1, 2, 3]);\n      expect(df3.get('y').values.toArray()).toEqual([2, 3, 4]);\n      expect(df3.index.toArray()).toEqual([1, 2, 3]);\n    });\n  });\n\n  describe('transpose', () => {\n    it('Tranposes a DataFrame by flipping indexes and columns', () => {\n      const df1 = new DataFrame(\n        [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n      const df2 = df1.transpose();\n\n      expect(df2.columns.toArray()).toEqual([1, 2, 3]);\n      expect(df2.index.toArray()).toEqual(['x', 'y']);\n      expect(df2.get(1).index.toArray()).toEqual(['x', 'y']);\n\n      const df3 = df2.transpose();\n      expect(df3.columns.toArray()).toEqual(['x', 'y']);\n      expect(df3.index.toArray()).toEqual([1, 2, 3]);\n      expect(df3.get('x').index.toArray()).toEqual([1, 2, 3]);\n    });\n  });\n});\n"]}