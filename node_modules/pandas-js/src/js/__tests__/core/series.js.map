{"version":3,"sources":["../../../es6/__tests__/core/series.js"],"names":[],"mappings":"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","file":"series.js","sourcesContent":["\nimport Immutable from 'immutable';\nimport Series from '../../core/series';\nimport * as dtype from '../../core/dtype';\nimport { IndexMismatchError } from '../../core/exceptions';\n\n\ndescribe('series', () => {\n  describe('Series', () => {\n    it('initializes properly with an Array', () => {\n      expect(new Series([1, 2, 3]).values).toBeInstanceOf(Immutable.List);\n      expect(new Series([1, 2, 3]).values.toArray()).toEqual([1, 2, 3]);\n\n      expect(new Series([1, 2, 3], {name: 'Test name'}).name).toEqual('Test name');\n    });\n\n    it('toString', () => {\n      const ds1 = new Series([1.5, 2.1, 3.9]);\n\n      expect(ds1.toString()).toEqual('0\\t1.5\\n1\\t2.1\\n2\\t3.9\\nName: , dtype: dtype(float)');\n    });\n\n    it('head', () => {\n      const ds = new Series([1, 2, 3, 4, 5]);\n      expect(ds.head(3).values.toArray()).toEqual([1, 2, 3]);\n    });\n\n    it('tail', () => {\n      const ds = new Series([1, 2, 3, 4, 5]);\n      expect(ds.tail(3).values.toArray()).toEqual([3, 4, 5]);\n    });\n\n    it('copy', () => {\n      const ds1 = new Series([1, 2, 3, 4], {index: [2, 3, 4, 5], name: 'Test name'});\n      const ds2 = ds1.copy();\n\n      expect(ds2).toBeInstanceOf(Series);\n      expect(ds2.values.toArray()).toEqual([1, 2, 3, 4]);\n\n      expect(ds1.name).toEqual('Test name');\n\n      ds2.index = [1, 2, 3, 4];\n      expect(ds1.index.toArray()).toEqual([2, 3, 4, 5]);\n      expect(ds2.index.toArray()).toEqual([1, 2, 3, 4]);\n    });\n\n    it('shape', () => {\n      const ds = new Series([1, 2, 3, 4, 5]);\n      expect(ds.shape).toBeInstanceOf(Immutable.Seq);\n      expect(ds.shape.toArray()).toEqual([5]);\n    });\n\n    it('rename', () => {\n      const ds = new Series([1, 2, 3], {name: 'test name'});\n      expect(ds.name).toEqual('test name');\n      const ds2 = ds.rename('test name 2');\n      expect(ds.name).toEqual('test name');\n      expect(ds2.name).toEqual('test name 2');\n    });\n\n    describe('astype', () => {\n      it('converts a float Series to an integer Series', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9]);\n        expect(ds1.dtype.dtype).toEqual('float');\n\n        const ds2 = ds1.astype(new dtype.DType('int'));\n        expect(ds2.values.toArray()).toEqual([1, 2, 3]);\n      });\n    });\n\n    describe('index', () => {\n      it('index is set properly as the [0, ..., length - 1] if not passed in constructor', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9]);\n        expect(ds1.index.toArray()).toEqual([0, 1, 2]);\n      });\n\n      it('index is set properly as the index array passed in in constructor', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9], {index: [1, 2, 3]});\n        expect(ds1.index.toArray()).toEqual([1, 2, 3]);\n      });\n\n      it('index is set properly as the index List passed in in constructor', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9], {index: Immutable.List([1, 2, 3])});\n        expect(ds1.index.toArray()).toEqual([1, 2, 3]);\n      });\n\n      it('throws IndexMismatchError if the index does not match', () => {\n        const f = () => new Series([1.5, 2.1, 3.9], {index: Immutable.List([1, 2, 3, 4])});\n        expect(f).toThrowError(IndexMismatchError);\n      });\n\n      it('index setter updates the index if proper length array passed in', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9], {index: Immutable.List([1, 2, 3])});\n        ds1.index = Immutable.List([2, 3, 4]);\n\n        expect(ds1.index.toArray()).toEqual([2, 3, 4]);\n      });\n\n      it('throws IndexMismatchError in setter if index does not match', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9], {index: Immutable.List([1, 2, 3])});\n        const f = () => { ds1.index = Immutable.List([2, 3, 4, 5]); };\n        expect(f).toThrowError(IndexMismatchError);\n      });\n    });\n\n    describe('iloc()', () => {\n      it('gets the value in a pandas.Series at the index', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9]);\n\n        expect(ds1.iloc(0)).toEqual(1.5);\n        expect(ds1.iloc(1)).toEqual(2.1);\n        expect(ds1.iloc(2)).toEqual(3.9);\n      });\n\n      it('gets a Series between startVal and endVal', () => {\n        const ds1 = new Series([1.5, 2.1, 3.9]);\n\n        expect(ds1.iloc(0, 2)).toBeInstanceOf(Series);\n        expect(ds1.iloc(0, 1).values.toArray()).toEqual([1.5]);\n        expect(ds1.iloc(0, 2).values.toArray()).toEqual([1.5, 2.1]);\n        expect(ds1.iloc(1, 3).values.toArray()).toEqual([2.1, 3.9]);\n      });\n    });\n\n    describe('map()', () => {\n      it('applies a function over the series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = ds1.map(v => v * 2);\n\n        expect(ds2).toBeInstanceOf(Series);\n        expect(ds2.values.toArray()).toEqual([2, 4, 6]);\n      });\n    });\n\n    describe('forEach()', () => {\n      const ds = new Series([1, 2, 3, 4]);\n\n      let a = 0;\n      ds.forEach((val) => { a += val; });\n      expect(a).toEqual(10);\n    });\n\n    describe('sum()', () => {\n      it('returns the sum of the Series', () => {\n        expect(new Series([1, 2, 3]).sum()).toEqual(6);\n      });\n    });\n\n    describe('mean()', () => {\n      it('returns the mean of the Series', () => {\n        expect(new Series([1, 2, 3]).mean()).toEqual(2);\n      });\n    });\n\n    describe('median()', () => {\n      it('returns the median of the even-length Series', () => {\n        expect(new Series([3, 2, 1, 4]).median()).toEqual(2.5);\n      });\n\n      it('returns the median of the odd-length Series', () => {\n        expect(new Series([4, 2, 1, 4, 7]).median()).toEqual(4);\n      });\n    });\n\n    describe('std()', () => {\n      it('returns the standard deviation of the Series', () => {\n        expect(new Series([1, 2, 3]).std()).toBeCloseTo(1, 12);\n      });\n    });\n\n    describe('abs()', () => {\n      it('returns the absolute value of a numeric Series', () => {\n        const ds = new Series([-1, 2, -3]);\n        const dsAbs = ds.abs();\n        expect(dsAbs).toBeInstanceOf(Series);\n        expect(dsAbs.values.toArray()).toEqual([1, 2, 3]);\n      });\n\n      it('returns copy of Series if it is not numeric', () => {\n        const ds = new Series(['hi', 2, 4]);\n        const dsAbs = ds.abs();\n        expect(dsAbs).toBeInstanceOf(Series);\n        expect(dsAbs.values.toArray()).toEqual(['hi', 2, 4]);\n      });\n    });\n\n    describe('add()', () => {\n      it('adds a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 4]);\n\n        const ds3 = ds1.add(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([3, 5, 7]);\n      });\n    });\n\n    describe('sub()', () => {\n      it('subtracts a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 5]);\n\n        const ds3 = ds1.sub(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([-1, -1, -2]);\n      });\n    });\n\n    describe('sub()', () => {\n      it('subtracts a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 5]);\n\n        const ds3 = ds1.sub(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([-1, -1, -2]);\n      });\n    });\n\n    describe('mul()', () => {\n      it('multiplies by a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 5]);\n\n        const ds3 = ds1.mul(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([2, 6, 15]);\n      });\n    });\n\n    describe('multiply()', () => {\n      it('multiplies by a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 5]);\n\n        const ds3 = ds1.multiply(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([2, 6, 15]);\n      });\n    });\n\n    describe('div()', () => {\n      it('divides by a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 5]);\n\n        const ds3 = ds1.div(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([0.5, 2 / 3, 0.6]);\n      });\n    });\n\n    describe('divide()', () => {\n      it('divides by a second Series and returns a new Series', () => {\n        const ds1 = new Series([1, 2, 3]);\n        const ds2 = new Series([2, 3, 5]);\n\n        const ds3 = ds1.divide(ds2);\n        expect(ds3).toBeInstanceOf(Series);\n        expect(ds3.values.size).toEqual(3);\n        expect(ds3.values.toJS()).toEqual([0.5, 2 / 3, 0.6]);\n      });\n    });\n\n    describe('diff', () => {\n      it('calculates the difference for 1 period', () => {\n        const ds = new Series([1, 2, 4, 8, 16]);\n        expect(ds.diff(1).values.toArray()).toEqual([null, 1, 2, 4, 8]);\n      });\n\n      it('calculates the difference for 2 periods', () => {\n        const ds = new Series([1, 2, 4, 8, 16]);\n        expect(ds.diff(2).values.toArray()).toEqual([null, null, 3, 6, 12]);\n      });\n    });\n\n    describe('pct_change', () => {\n      it('calculates the percent change for 1 period', () => {\n        const ds = new Series([1, 2, 3, 4, 5]);\n        expect(ds.pct_change(1).values.toArray()).toEqual([null, 1, 0.5, (4 / 3) - 1, 0.25]);\n      });\n\n      it('calculates the percent change for 2 periods', () => {\n        const ds = new Series([1, 2, 3, 4, 5]);\n        expect(ds.pct_change(2).values.toArray()).toEqual([null, null, 2, 1, (5 / 3) - 1]);\n      });\n    });\n\n    describe('sort_values', () => {\n      it('sorts the Series by the values in ascending order', () => {\n        const ds1 = new Series([2, 3, 4, 1]).sort_values();\n\n        expect(ds1.values.toArray()).toEqual([1, 2, 3, 4]);\n        expect(ds1.index.toArray()).toEqual([3, 0, 1, 2]);\n      });\n\n      it('sorts the Series by the values in descending order', () => {\n        const ds = new Series([2, 3, 4, 1]);\n        const ds1 = ds.sort_values(false);\n\n        expect(ds1.values.toArray()).toEqual([4, 3, 2, 1]);\n        expect(ds1.index.toArray()).toEqual([2, 1, 0, 3]);\n      });\n\n      it('sorts the Series by the values in ascending order for strings', () => {\n        const ds = new Series(['hi', 'bye', 'test', 'foo', 'bar']);\n        const ds1 = ds.sort_values(true);\n\n        expect(ds1.values.toArray()).toEqual(['bar', 'bye', 'foo', 'hi', 'test']);\n        expect(ds1.index.toArray()).toEqual([4, 1, 3, 0, 2]);\n      });\n\n      it('sorts the Series by the values in descending order for strings', () => {\n        const ds = new Series(['hi', 'bye', 'test', 'foo', 'bar']);\n        const ds1 = ds.sort_values(false);\n\n        expect(ds1.values.toArray()).toEqual(['test', 'hi', 'foo', 'bye', 'bar']);\n        expect(ds1.index.toArray()).toEqual([2, 0, 3, 1, 4]);\n      });\n    });\n\n    describe('round', () => {\n      it('rounds a Series to 1 digit', () => {\n        const ds = new Series([1.1, 2.13, 2.25, 2.76]);\n        const dsRound = ds.round(1);\n\n        expect(dsRound).toBeInstanceOf(Series);\n        expect(dsRound.values.toArray()).toEqual([1.1, 2.1, 2.3, 2.8]);\n      });\n\n      it('rounds a Series to 2 digits', () => {\n        const ds = new Series([1.1, 2.137, 2.255, 2.761]);\n        const dsRound = ds.round(2);\n\n        expect(dsRound).toBeInstanceOf(Series);\n        expect(dsRound.values.toArray()).toEqual([1.10, 2.14, 2.26, 2.76]);\n      });\n    });\n\n    describe('_alignSeries', () => {\n      it('properly aligns Series with the same index values', () => {\n        const ds1 = new Series(['hi', 'bye', 'test', 'foo', 'bar']);\n        const ds2 = new Series(['bye', 'hi', 'foo', 'test', 'bar']);\n\n        const aligned = ds1._alignSeries(ds2);\n        expect(aligned.size).toEqual(5);\n        expect(aligned.getIn([0, 'first']).toArray()).toEqual(['hi']);\n        expect(aligned.getIn([0, 'second']).toArray()).toEqual(['bye']);\n        expect(aligned.getIn([1, 'first']).toArray()).toEqual(['bye']);\n        expect(aligned.getIn([1, 'second']).toArray()).toEqual(['hi']);\n        expect(aligned.getIn([2, 'first']).toArray()).toEqual(['test']);\n        expect(aligned.getIn([2, 'second']).toArray()).toEqual(['foo']);\n        expect(aligned.getIn([3, 'first']).toArray()).toEqual(['foo']);\n        expect(aligned.getIn([3, 'second']).toArray()).toEqual(['test']);\n        expect(aligned.getIn([4, 'first']).toArray()).toEqual(['bar']);\n        expect(aligned.getIn([4, 'second']).toArray()).toEqual(['bar']);\n      });\n\n      it('properly aligns Series with the differing index values', () => {\n        const ds1 = new Series(['hi', 'bye', 'test', 'foo', 'bar']);\n        const ds2 = new Series(['bye', 'hi', 'foo', 'test', 'bar']);\n\n        const aligned = ds1._alignSeries(ds2);\n        expect(aligned.size).toEqual(5);\n        expect(aligned.getIn([0, 'first']).toArray()).toEqual(['hi']);\n        expect(aligned.getIn([0, 'second']).toArray()).toEqual(['bye']);\n        expect(aligned.getIn([1, 'first']).toArray()).toEqual(['bye']);\n        expect(aligned.getIn([1, 'second']).toArray()).toEqual(['hi']);\n        expect(aligned.getIn([2, 'first']).toArray()).toEqual(['test']);\n        expect(aligned.getIn([2, 'second']).toArray()).toEqual(['foo']);\n        expect(aligned.getIn([3, 'first']).toArray()).toEqual(['foo']);\n        expect(aligned.getIn([3, 'second']).toArray()).toEqual(['test']);\n        expect(aligned.getIn([4, 'first']).toArray()).toEqual(['bar']);\n        expect(aligned.getIn([4, 'second']).toArray()).toEqual(['bar']);\n      });\n    });\n\n    describe('where', () => {\n      it('checks for equality of a scalar and returns a Series of dtype bool', () => {\n        const ds1 = new Series(['hi', 'bye', 'test', 'foo', 'bar']);\n        const ds2 = ds1.where('hi', (a, b) => a === b);\n\n        expect(ds2.values.toArray()).toEqual([true, false, false, false, false]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n\n      it('checks for equality of a Series and returns a Series of dtype bool', () => {\n        const ds1 = new Series(['hi', 'bye', 'test']);\n        const ds2 = ds1.where(new Series(['bye', 'bye', 'test']), (a, b) => a === b);\n\n        expect(ds2.values.toArray()).toEqual([false, true, true]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n    });\n\n    describe('eq', () => {\n      it('checks for equality of a scalar and returns a Series of dtype bool', () => {\n        const ds1 = new Series(['hi', 'bye', 'test', 'foo', 'bar']);\n        const ds2 = ds1.eq('hi');\n\n        expect(ds2.values.toArray()).toEqual([true, false, false, false, false]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n\n      it('checks for equality of a Series and returns a Series of dtype bool', () => {\n        const ds1 = new Series(['hi', 'bye', 'test']);\n        const ds2 = ds1.eq(new Series(['bye', 'bye', 'test']));\n\n        expect(ds2.values.toArray()).toEqual([false, true, true]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n    });\n\n    describe('lt', () => {\n      it('checks for less than of a scalar and returns a Series of dtype bool', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = ds1.lt(3);\n\n        expect(ds2.values.toArray()).toEqual([true, true, false, false]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n\n      it('checks for less than of a Series and returns a Series of dtype bool', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = ds1.lt(new Series([2, 3, 2, 2]));\n\n        expect(ds2.values.toArray()).toEqual([true, true, false, false]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n    });\n\n    describe('lte', () => {\n      it('checks for less than or equal to of a scalar and returns a Series of dtype bool', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = ds1.lte(3);\n\n        expect(ds2.values.toArray()).toEqual([true, true, true, false]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n\n      it('checks for less than or equal to of a Series and returns a Series of dtype bool', () => {\n        const ds1 = new Series([2, 2, 3, 4]);\n        const ds2 = ds1.lte(new Series([2, 3, 2, 2]));\n\n        expect(ds2.values.toArray()).toEqual([true, true, false, false]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n    });\n\n    describe('gt', () => {\n      it('checks for greater than of a scalar and returns a Series of dtype bool', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = ds1.gt(3);\n\n        expect(ds2.values.toArray()).toEqual([false, false, false, true]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n\n      it('checks for greater than of a Series and returns a Series of dtype bool', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = ds1.gt(new Series([2, 3, 2, 2]));\n\n        expect(ds2.values.toArray()).toEqual([false, false, true, true]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n    });\n\n    describe('gte', () => {\n      it('checks for greater than or equal of a scalar and returns a Series of dtype bool', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = ds1.gte(3);\n\n        expect(ds2.values.toArray()).toEqual([false, false, true, true]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n\n      it('checks for greater than or equal of a Series and returns a Series of dtype bool', () => {\n        const ds1 = new Series([2, 2, 3, 4]);\n        const ds2 = ds1.gte(new Series([2, 3, 2, 2]));\n\n        expect(ds2.values.toArray()).toEqual([true, false, true, true]);\n        expect(ds2.dtype.dtype).toEqual('bool');\n      });\n    });\n\n    describe('notnull', () => {\n      it('returns a Series with true if value is not null, false otherwise', () => {\n        const ds = new Series([1, 2, null, null, 4]);\n        expect(ds.notnull()).toBeInstanceOf(Series);\n        expect(ds.notnull().values.toArray()).toEqual([true, true, false, false, true]);\n      });\n    });\n\n    describe('shift', () => {\n      it('returns a copy of the Series if the periods === 0', () => {\n        const ds1 = new Series([2, 2, 3, 4]);\n        expect(ds1.shift(0).values.toArray()).toEqual([2, 2, 3, 4]);\n      });\n\n      it('returns a shifted array if the periods > 0', () => {\n        const ds1 = new Series([2, 2, 3, 4]);\n        expect(ds1.shift(1).values.toArray()).toEqual([null, 2, 2, 3]);\n      });\n\n      it('returns a shifted array if the periods < 0', () => {\n        const ds1 = new Series([2, 2, 3, 4]);\n        expect(ds1.shift(-1).values.toArray()).toEqual([2, 3, 4, null]);\n      });\n    });\n\n    describe('unique', () => {\n      it('returns unique floats', () => {\n        const ds1 = new Series([2, 3.1, 2.1, 3.1, 3.1, 4.3]);\n        expect(ds1.unique().toArray()).toEqual([2, 3.1, 2.1, 4.3]);\n      });\n\n      it('returns unique strings', () => {\n        const ds1 = new Series(['foo', 'bar', 'bar', 'foo', 'foo', 'test', 'bar', 'hi']);\n        expect(ds1.unique().toArray()).toEqual(['foo', 'bar', 'test', 'hi']);\n      });\n    });\n\n    describe('filter', () => {\n      it('filters with a simple eq check', () => {\n        const ds = new Series([1, 2, 3, 4, 1]);\n        const dsFilter = ds.filter(ds.eq(1));\n\n        expect(dsFilter.length).toEqual(2);\n        expect(dsFilter.values.toArray()).toEqual([1, 1]);\n        expect(dsFilter.index.toArray()).toEqual([0, 4]);\n      });\n\n      it('filters with a custom where', () => {\n        const ds = new Series([1, 2, 3, 4, 1]);\n        const dsFilter = ds.filter(ds.where(2, (a, b) => a * 2 > b));\n\n        expect(dsFilter.length).toEqual(3);\n        expect(dsFilter.values.toArray()).toEqual([2, 3, 4]);\n        expect(dsFilter.index.toArray()).toEqual([1, 2, 3]);\n      });\n    });\n\n    describe('cov', () => {\n      it('calculates the covariance between this Series and another', () => {\n        const ds1 = new Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n        const ds2 = new Series([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8]);\n\n        const cov = ds1.cov(ds2);\n        expect(cov).toBeCloseTo(18.3333333, 6);\n      });\n\n      it('throws an error if the Series are not equal length', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = new Series([2, 3, 4]);\n\n        expect(() => { ds1.cov(ds2); }).toThrow();\n      });\n    });\n\n    describe('corr', () => {\n      it('calculates the correlation between this Series and another', () => {\n        const ds1 = new Series([1, 2, 3, 4, 5]);\n        const ds2 = new Series([-10, -8, -6, -4, -2]);\n\n        const corr = ds1.corr(ds2);\n        expect(corr).toBeCloseTo(1, 8);\n      });\n\n      it('throws an error if the Series are not equal length', () => {\n        const ds1 = new Series([1, 2, 3, 4]);\n        const ds2 = new Series([2, 3, 4]);\n\n        expect(() => { ds1.corr(ds2); }).toThrow();\n      });\n    });\n\n    describe('to_json', () => {\n      it('converts a pandas Series to a json object', () => {\n        const ds = new Series([1, 2, 3, 4], {name: 'x'});\n\n        const dsJSON = ds.to_json();\n        expect(dsJSON).toEqual({0: 1, 1: 2, 2: 3, 3: 4});\n      });\n\n      it('converts a pandas Series to a json object when orient=\"records\"', () => {\n        const ds = new Series([1, 2, 3, 4], {name: 'x'});\n\n        const dsJSON = ds.to_json({orient: 'records'});\n        expect(dsJSON).toEqual([1, 2, 3, 4]);\n      });\n\n      it('converts a pandas Series to a json object when orient=\"split\"', () => {\n        const ds = new Series([1, 2, 3, 4], {name: 'x'});\n\n        const dsJSON = ds.to_json({orient: 'split'});\n        expect(dsJSON).toEqual({name: 'x', index: [0, 1, 2, 3], values: [1, 2, 3, 4]});\n      });\n    });\n\n    describe('cumulative functions', () => {\n      it('cumsum', () => {\n        const ds = new Series([1, 2, 3, 4, 5], {index: [2, 3, 4, 5, 6]});\n        const ds2 = ds.cumsum();\n        expect(ds2).toBeInstanceOf(Series);\n        expect(ds2.values.toArray()).toEqual([1, 3, 6, 10, 15]);\n        expect(ds2.index.toArray()).toEqual([2, 3, 4, 5, 6]);\n      });\n\n      it('cummul', () => {\n        const ds = new Series([1, 2, 3, 4, 5], {index: [2, 3, 4, 5, 6]});\n        const ds2 = ds.cummul();\n        expect(ds2).toBeInstanceOf(Series);\n        expect(ds2.values.toArray()).toEqual([1, 2, 6, 24, 120]);\n        expect(ds2.index.toArray()).toEqual([2, 3, 4, 5, 6]);\n      });\n\n      it('cummax', () => {\n        const ds = new Series([1, 2, 6, 4, 5], {index: [2, 3, 4, 5, 6]});\n        const ds2 = ds.cummax();\n        expect(ds2).toBeInstanceOf(Series);\n        expect(ds2.values.toArray()).toEqual([1, 2, 6, 6, 6]);\n        expect(ds2.index.toArray()).toEqual([2, 3, 4, 5, 6]);\n      });\n\n      it('cummin', () => {\n        const ds = new Series([3, 2, 6, 1, 5], {index: [2, 3, 4, 5, 6]});\n        const ds2 = ds.cummin();\n        expect(ds2).toBeInstanceOf(Series);\n        expect(ds2.values.toArray()).toEqual([3, 2, 2, 1, 1]);\n        expect(ds2.index.toArray()).toEqual([2, 3, 4, 5, 6]);\n      });\n    });\n  });\n\n  describe('append', () => {\n    it('Appends a Series to another when ignore_index is false', () => {\n      const ds1 = new Series([1, 2, 3], {index: [1, 2, 3]});\n      const ds2 = new Series([2, 3, 4], {index: [2, 3, 4]});\n      const ds3 = ds1.append(ds2);\n      expect(ds3.values.toArray()).toEqual([1, 2, 3, 2, 3, 4]);\n      expect(ds3.index.toArray()).toEqual([1, 2, 3, 2, 3, 4]);\n    });\n\n    it('Appends a Series to another when ignore_index is true', () => {\n      const ds1 = new Series([1, 2, 3], {index: [1, 2, 3]});\n      const ds2 = new Series([2, 3, 4], {index: [2, 3, 4]});\n      const ds3 = ds1.append(ds2, true);\n      expect(ds3.values.toArray()).toEqual([1, 2, 3, 2, 3, 4]);\n      expect(ds3.index.toArray()).toEqual([0, 1, 2, 3, 4, 5]);\n    });\n  });\n});\n"]}