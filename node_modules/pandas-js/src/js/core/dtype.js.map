{"version":3,"sources":["../../es6/core/dtype.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,MAAM,KAAZ;AACA,IAAM,QAAQ,OAAd;AACA,IAAM,SAAS,QAAf;AACA,IAAM,OAAO,MAAb;AACA,IAAM,WAAW,UAAjB;;AAEA,IAAM,iBAAiB,CACrB,GADqB,EAErB,KAFqB,EAGrB,MAHqB,EAIrB,IAJqB,EAKrB,QALqB,CAAvB;;IAQa,K,WAAA,K;AACX,iBAAY,IAAZ,EAAkB;AAAA;;AAChB,QAAI,eAAe,OAAf,CAAuB,IAAvB,IAA+B,CAAnC,EACE,MAAM,IAAI,KAAJ,YAAmB,IAAnB,kBAAN;;AAEF,SAAK,KAAL,GAAa,IAAb;AACD;;;;+BAMU;AACT,wBAAgB,KAAK,KAArB;AACD;;;wBANW;AACV,aAAO,KAAK,KAAZ;AACD;;;;;AAQH;;;;;;;AAKO,IAAM,0CAAiB,SAAjB,cAAiB,CAAC,EAAD,EAAQ;AACpC,MAAI,aAAa,GAAjB;;AAEA,MAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,iBAAa,MAAb;AACD,GAFD,MAEO,IAAI,CAAC,OAAO,SAAP,CAAiB,EAAjB,CAAD,IAAyB,OAAO,EAAP,KAAc,QAA3C,EAAqD;AAC1D,iBAAa,KAAb;AACD,GAFM,MAEA,IAAI,OAAO,EAAP,KAAc,SAAlB,EAA6B;AAClC,iBAAa,IAAb;AACD,GAFM,MAEA,IAAI,cAAc,IAAlB,EAAwB;AAC7B,iBAAa,QAAb;AACD,GAFM,MAEA,IAAI,QAAO,EAAP,uDAAO,EAAP,OAAc,QAAlB,EAA4B;AACjC,iBAAa,MAAb;AACD;;AAED,SAAO,IAAI,KAAJ,CAAU,UAAV,CAAP;AACD,CAhBM;;AAkBP;;;;;;AAMO,IAAM,sCAAe,SAAf,YAAe,CAAC,KAAD,EAAW;AACrC,MAAI,mBAAJ;;AAEA;AAHqC;AAAA;AAAA;;AAAA;AAIrC,yBAAiB,KAAjB,8HAAwB;AAAA,UAAb,EAAa;;AACtB,mBAAa,eAAe,EAAf,CAAb;;AAEA,UAAI,WAAW,KAAX,KAAqB,GAArB,IAA4B,WAAW,KAAX,KAAqB,KAAjD,IAA0D,WAAW,KAAX,KAAqB,QAAnF,EACE;AACH;AAToC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWrC,SAAO,UAAP;AACD,CAZM","file":"dtype.js","sourcesContent":["\n\nconst int = 'int';\nconst float = 'float';\nconst object = 'object';\nconst bool = 'bool';\nconst datetime = 'datetime';\n\nconst ALLOWED_DTYPES = [\n  int,\n  float,\n  object,\n  bool,\n  datetime,\n];\n\nexport class DType {\n  constructor(name) {\n    if (ALLOWED_DTYPES.indexOf(name) < 0)\n      throw new Error(`dtype ${name} not allowed`);\n\n    this._name = name;\n  }\n\n  get dtype() {\n    return this._name;\n  }\n\n  toString() {\n    return `dtype(${this.dtype})`;\n  }\n}\n\n\n/**\n *\n * @param el\n * @returns {DType}\n */\nexport const elementToDType = (el) => {\n  let arrayDType = int;\n\n  if (typeof el === 'string') {\n    arrayDType = object;\n  } else if (!Number.isInteger(el) && typeof el === 'number') {\n    arrayDType = float;\n  } else if (typeof el === 'boolean') {\n    arrayDType = bool;\n  } else if (el instanceof Date) {\n    arrayDType = datetime;\n  } else if (typeof el === 'object') {\n    arrayDType = object;\n  }\n\n  return new DType(arrayDType);\n};\n\n/**\n * Returns the DType of an array\n *\n * @param array\n * @returns {DType}\n */\nexport const arrayToDType = (array) => {\n  let arrayDType;\n\n  // eslint-disable-next-line\n  for (const el of array) {\n    arrayDType = elementToDType(el);\n\n    if (arrayDType.dtype !== int && arrayDType.dtype !== float && arrayDType.dtype !== datetime)\n      break;\n  }\n\n  return arrayDType;\n};\n"]}