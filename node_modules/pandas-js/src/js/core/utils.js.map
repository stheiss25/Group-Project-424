{"version":3,"sources":["../../es6/core/utils.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import Immutable from 'immutable';\nimport {IndexMismatchError} from './exceptions';\n\n\n/**\n * Calculate the sum of values in an iterable\n *\n * @param {Iterable} iterable\n */\nexport const sum = iterable => iterable.reduce((s, v) => s + v, 0);\n\n\n/**\n * enumerate an iterable\n * Inspired by: http://stackoverflow.com/a/10179849\n *\n * @param iterable\n */\nexport function* enumerate(iterable) {\n  let i = 0;\n\n  // eslint-disable-next-line\n  for (const x of iterable) {\n    yield [x, i];\n    i += 1;\n  }\n}\n\n\n// Merge utils\n/**\n * Columns in DataFrame that will not be used as merge keys\n *\n * @param {Array<string>} columns\n * @param {Array<string>} on\n * @returns {Array<string>}\n */\nexport const nonMergeColumns = (columns, on) => columns.filter(k => on.indexOf(k) < 0);\n\n\n/**\n * Columns appearing in both\n *\n * @param {Array<string>} cols1\n * @param {Array<string>} cols2\n * @returns {Array<string>}\n */\nexport const intersectingColumns = (cols1, cols2) => cols1.filter(k => cols2.indexOf(k) >= 0);\n\n\n/**\n *\n * @param {Array|List|string|number} index\n *    Values to update the index in the Series\n * @param {List} values\n *    The values in the Series\n *\n * @returns {List}\n */\nexport const parseIndex = (index, values) => {\n  if (Array.isArray(index)) {\n    if (values.size !== index.length)\n      throw new IndexMismatchError('values size not equal to index size');\n\n    return Immutable.List(index);\n  } else if (index instanceof Immutable.List) {\n    if (values.size !== index.size)\n      throw new IndexMismatchError('values size not equal to index size');\n\n    return index;\n  } else if (typeof index !== 'undefined') {\n    if (values.size !== 1) throw new IndexMismatchError();\n\n    return Immutable.List([index]);\n  } else if (typeof index === 'undefined') {\n    return Immutable.Range(0, values.size).toList();\n  } else {\n    throw new IndexMismatchError();\n  }\n};\n\n\n/**\n * Adjust the decimal value for round, floor, or ceiling\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n *\n * @param type\n * @param value\n * @param exp\n * @returns {*}\n */\nconst decimalAdjust = (type, value, exp) => {\n  // If the exp is undefined or zero...\n  if (typeof exp === 'undefined' || +exp === 0) {\n    return Math[type](value);\n  }\n  // noinspection Eslint\n  value = +value;\n  // noinspection Eslint\n  exp = +exp;\n  // If the value is not a number or the exp is not an integer...\n  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n    return NaN;\n  }\n  // Shift\n  // noinspection Eslint\n  value = value.toString().split('e');\n  // noinspection Eslint\n  value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n  // Shift back\n  // noinspection Eslint\n  value = value.toString().split('e');\n  // noinspection Eslint\n  return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n};\n\n\n/**\n * Round the value to the nearest power of 10\n *\n * @param {number} value\n * @param {number} exp\n * @returns {number}\n *\n * @example\n * // Returns 1.65\n * round10(1.65234123415, -2);\n */\nexport const round10 = (value, exp) => decimalAdjust('round', value, exp);\n\n\nexport const OP_CUMSUM = 'OP_CUMSUM';\nexport const OP_CUMMUL = 'OP_CUMMUL';\nexport const OP_CUMMAX = 'OP_CUMMAX';\nexport const OP_CUMMIN = 'OP_CUMMIN';\n\n/**\n * Generate a cumulative function which takes in an iterable `values`\n * and returns the accumulated iterable\n *\n * @param {string} operation\n *  Type of operation for which to generate the cumulative function (takes an iterable)\n *\n * @returns {function(*)}\n */\nexport const generateCumulativeFunc = (operation) => {\n  switch (operation) {\n    case OP_CUMSUM:\n      return (values) => { let agg = 0; return values.map((v) => { agg += v; return agg; }); };\n    case OP_CUMMUL:\n      return (values) => { let agg = 1; return values.map((v) => { agg *= v; return agg; }); };\n    case OP_CUMMAX:\n      return (values) => {\n        let maxVal = Number.NEGATIVE_INFINITY;\n        return values.map((v) => { maxVal = Math.max(maxVal, v); return maxVal; });\n      };\n    case OP_CUMMIN:\n      return (values) => {\n        let minVal = Number.POSITIVE_INFINITY;\n        return values.map((v) => { minVal = Math.min(minVal, v); return minVal; });\n      };\n    default:\n      throw new Error(`Not implemented for ${operation}`);\n  }\n};\n"]}