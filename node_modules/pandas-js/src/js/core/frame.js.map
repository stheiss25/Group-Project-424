{"version":3,"sources":["../../es6/core/frame.js"],"names":[],"mappings":"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","file":"frame.js","sourcesContent":["/** @flow\n * DataFrame object\n */\n\nimport Immutable from 'immutable';\n// import { saveAs } from 'file-saver'; TODO figure out if best way\n\nimport { InvalidAxisError } from './exceptions';\nimport NDFrame from './generic';\n// import { MultiIndex } from './multiindex';\nimport Series, { _concatSeries } from './series';\n// import { Workbook, Sheet } from './structs'; TODO\nimport { enumerate, nonMergeColumns, intersectingColumns, parseIndex,\n  OP_CUMSUM, OP_CUMMUL, OP_CUMMIN, OP_CUMMAX, generateCumulativeFunc } from './utils';\n\n\ndeclare type T_LIST = Immutable.List\ndeclare type T_MAP = Immutable.Map;\ndeclare type T_SK = string | number;\n// eslint-disable-next-line\ndeclare type T_COTHER = Array<T_SK> | T_LIST | Series | DataFrame | T_SK;\ndeclare type T_PVINDEX = Array<T_SK> | T_LIST | T_SK;\n\n\nconst parseArrayToSeriesMap = (array: Array<Object>, index: T_LIST): T_MAP => {\n  let dataMap = Immutable.Map({});\n\n  array.forEach((el) => {\n    if (el instanceof Immutable.Map) {\n      el.keySeq().forEach((k) => {\n        if (dataMap.has(k)) {\n          dataMap = dataMap.set(k, dataMap.get(k).push(el.get(k)));\n        } else {\n          dataMap = dataMap.set(k, Immutable.List.of(el.get(k)));\n        }\n      });\n    } else if (typeof el === 'object') {\n      Object.keys(el).forEach((k) => {\n        if (dataMap.has(k)) {\n          dataMap = dataMap.set(k, dataMap.get(k).push(el[k]));\n        } else {\n          dataMap = dataMap.set(k, Immutable.List.of(el[k]));\n        }\n      });\n    }\n  });\n\n  dataMap.keySeq().forEach((k) => {\n    dataMap = dataMap.set(k, new Series(dataMap.get(k), {name: k, index}));\n  });\n\n  return Immutable.Map(dataMap);\n};\n\nexport default class DataFrame extends NDFrame {\n  /**\n   * Two-dimensional size-mutable, potentially heterogeneous tabular data\n   * structure with labeled axes (rows and columns). Arithmetic operations\n   * align on both row and column labels. Can be thought of as a Immutable.Map-like\n   * container for Series objects. The primary pandas data structure\n   *\n   * @param data {Array|Object}\n   *    Data to be stored in DataFrame\n   * @param {Object} kwargs\n   *    Extra optional arguments for a DataFrame\n   * @param {Array|Object} [kwargs.index]\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}])\n   *\n   * // Returns:\n   * //    x  |  y\n   * // 0  1  |  2\n   * // 1  2  |  3\n   * // 2  3  |  4\n   * df.toString();\n   */\n  constructor(data: Array<Object> | Object, kwargs: Object = {}) {\n    super(data, kwargs);\n\n    if (Array.isArray(data)) {\n      this.set_axis(0, parseIndex(kwargs.index, Immutable.List(data)));\n      this._data = parseArrayToSeriesMap(data, this.index);\n      this.set_axis(1, this._data.keySeq());\n    } else if (data instanceof Immutable.Map) {\n      this._data = Immutable.OrderedMap(data.keySeq().map((k) => {\n        if (data instanceof Immutable.Map && !(data.get(k) instanceof Series))\n          throw new Error('Map must have [column, series] key-value pairs');\n\n        if (data instanceof Immutable.Map)\n          return [k, data.get(k).copy()];\n\n        throw new Error('Data is not Map');\n      }));\n      this.set_axis(1, this._data.keySeq());\n      this.set_axis(0, this._data.get(this.columns.get(0)).index);\n    } else if (data instanceof Immutable.List) { // List of List of row values\n      let columns;\n      if (Array.isArray(kwargs.columns) || kwargs.columns instanceof Immutable.Seq)\n        columns = Immutable.List(kwargs.columns);\n      else if (kwargs.columns instanceof Immutable.List)\n        columns = kwargs.columns;\n      else if (typeof kwargs.columns === 'undefined')\n        columns = Immutable.Range(0, data.get(0).size).toList();\n      else\n        throw new Error('Invalid columns');\n\n      this._values = data; // Cache the values since we're in List of List or row data already\n      this._data = Immutable.OrderedMap(columns.map((c, colIdx) =>\n        ([c, new Series(data.map(row => row.get(colIdx)), {index: kwargs.index})])));\n\n      this.set_axis(1, this._data.keySeq());\n      this.set_axis(0, this._data.get(this.columns.get(0)).index);\n    } else if (typeof data === 'undefined') {\n      this._data = Immutable.Map({});\n      this.set_axis(0, Immutable.List.of());\n      this.set_axis(1, Immutable.Seq.of());\n    }\n\n    this._setup_axes(Immutable.List.of(0, 1));\n  }\n\n  toString(): string {\n    let string = '\\t|';\n    this.columns.forEach((k) => { string += `  ${k}  |`; });\n    const headerRow = '-'.repeat(string.length);\n\n    string += `\\n${headerRow}\\n`;\n\n    const stringUpdate = (idx) => {\n      let s = '';\n      this.columns.forEach((k) => { s += `  ${this._data.get(k).iloc(idx)}  |`; });\n      return s;\n    };\n\n    for (let idx = 0; idx < this.length; idx += 1) {\n      string += `${this.index.get(idx)}\\t|`;\n      string += stringUpdate(idx);\n      string += '\\n';\n    }\n\n    return string;\n  }\n\n  /**\n   * Return a new deep copy of the `DataFrame`\n   *\n   * pandas equivalent: [DataFrame.copy](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.copy.html)\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   * const df2 = df.copy();\n   * df2.index = [1, 2, 3];\n   * df.index   // [0, 1, 2];\n   * df2.index  // [1, 2, 3];\n   */\n  copy(): DataFrame {\n    return new DataFrame(this._data, {index: this.index});\n  }\n\n  // $FlowFixMe\n  [Symbol.iterator]() {\n    let index = -1;\n\n    return {\n      next: () => {\n        index += 1;\n        const done = !(index >= 0 && index < this.length);\n        const value = done\n          ? undefined\n          : Immutable.Map(this.columns.map((k, idx) => [k, this.values.get(index).get(idx)]));\n        return {value, done};\n      },\n    };\n  }\n\n  /**\n   * A generator which returns [row, index location] tuples\n   *\n   * pandas equivalent: [DataFrame.iterrows](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html)\n   *\n   * @returns {*}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Logs 2 4 6\n   * for(const [row, idx] of df) {\n   *   console.log(row.get('x') * 2);\n   * }\n   */\n  iterrows() {\n    return enumerate(this);\n  }\n\n  get kwargs(): Object {\n    return {index: this.index, columns: this.columns};\n  }\n\n  /**\n   * Immutable.List of Immutable.List, with [row][column] indexing\n   *\n   * pandas equivalent: [DataFrame.values](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html)\n   *\n   * @returns {List.<List>}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns List [ List[1, 2, 3], List[2, 3, 4]]\n   * df.values;\n   */\n  get values(): T_LIST {\n    if (this._values instanceof Immutable.List)\n      return super.values;\n\n    let valuesList = Immutable.List([]);\n    for (let idx = 0; idx < this.length; idx += 1) {\n      valuesList = valuesList.concat(\n        [Immutable.List(this.columns.map(k => this._data.get(k).iloc(idx)))]);\n    }\n    this._values = valuesList;\n\n    return super.values;\n  }\n\n  /**\n   * Returns the indexed Immutable.Seq of columns\n   *\n   * pandas equivalent: [DataFrame.columns](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.columns.html)\n   *\n   * @returns {Seq.Indexed<string>}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns Seq ['x', 'y']\n   * df.columns;\n   */\n  get columns(): Immutable.Seq {\n    return this._get_axis(1);\n  }\n\n  // noinspection JSAnnotator\n  /**\n   * Sets columns\n   *\n   * pandas equivalent: [DataFrame.columns](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.columns.html)\n   *\n   * @param {Seq.Indexed<string>|Array} columns\n   *    Next column names\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * df.columns = ['a', 'b'];\n   * // Returns Seq ['a', 'b']\n   * df.columns;\n   */\n  set columns(columns: Immutable.Seq<T_SK> | Array<T_SK>) {\n    if (!Array.isArray(columns) || columns.length !== this.columns.size)\n      throw new Error('Columns must be array of same dimension');\n\n    const nextData = {};\n    columns.forEach((k, idx: number) => {\n      const prevColumn: T_SK = this.columns.get(idx);\n      const prevSeries: Series = this.get(prevColumn);\n\n      nextData[k] = prevSeries.rename(k);\n    });\n\n    this._data = Immutable.Map(nextData);\n    this.set_axis(1, Immutable.Seq(columns));\n  }\n\n  /**\n   * Return the index values of the `DataFrame`\n   *\n   * @returns {List}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns List [0, 1, 2, 3]\n   * df.index;\n   */\n  get index(): T_LIST {\n    return this._get_axis(0);\n  }\n\n  // noinspection JSAnnotator\n  /**\n   * Set the index values of the `DataFrame`\n   *\n   * @param {List|Array} index\n   *  Next index values\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns List [0, 1, 2, 3]\n   * df.index;\n   * df.index = Immutable.List([2, 3, 4, 5]);\n   * // Returns List [2, 3, 4, 5]\n   * df.index;\n   */\n  set index(index: Immutable.List<T_SK> | Array<T_SK>) {\n    this.set_axis(0, parseIndex(index, this._data.get(this.columns.get(0)).values));\n\n    // noinspection Eslint\n    this._data.mapEntries(([k, v]) => { // noinspection Eslint\n      v.index = this.index;\n    });\n  }\n\n  /**\n   * Return the length of the `DataFrame`\n   *\n   * pandas equivalent: len(df);\n   *\n   * @returns {number}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns 3\n   * df.length;\n   */\n  get length(): number {\n    return Math.max(0, ...this.columns.map(k => this.get(k).length).toArray());\n  }\n\n  /**\n   * Set a `Series` at `column`\n   *\n   * @param {string|number} column\n   * @param {Series|List|Array} series\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1}, {x: 2}, {x: 3}]);\n   *\n   * // Returns DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   * df.set('y', new Series([2, 3, 4]));\n   */\n  set(column: T_SK, series: Series | Immutable.List<T_SK> | Array<T_SK>): DataFrame {\n    if (series instanceof Series)\n      return new DataFrame(this._data.set(column, series), this.kwargs);\n    else if (series instanceof Immutable.List || Array.isArray(series))\n      return new DataFrame(this._data.set(\n        column, // $FlowFixMe TODO\n        new Series(series, {index: this.index, name: column})), this.kwargs);\n    throw new TypeError('series must be a Series!');\n  }\n\n  /**\n   * Reset the index for a DataFrame\n   *\n   * pandas equivalent: [DataFrame.reset_index](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html)\n   *\n   * @param {object} args\n   * @param {boolean} args.drop\n   *  Drop the index when resetting? Otherwise, add as new column\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}], {index: [1, 2]});\n   *\n   * // returns DataFrame([{index: 1, x: 1, y: 2}, {index: 2, x: 2, y: 3}], {index: [0, 1]})\n   * df.reset_index();\n   *\n   * // returns DataFrame([{x: 1, y: 2}, {x: 2, y: 3}], {index: [0, 1]});\n   * df.reset_index({drop: true});\n   *\n   * const df2 = new DataFrame([{index: 1}, {index: 2}], {index: [1, 2]});\n   * // returns DataFrame([{level_0: 1, index: 1}, {level_0: 1, index: 2}], {index: [1, 2]});\n   * df2.reset_index();\n   */\n  reset_index(args: Object = {drop: false}): DataFrame {\n    if (typeof args.drop !== 'undefined' && typeof args.drop !== 'boolean')\n      throw new TypeError('drop must be a boolean');\n    const drop = typeof args.drop === 'undefined' ? false : args.drop;\n\n    let indexName = 'index';\n    if (this.columnExists('index')) {\n      let i = 0;\n      while (this.columnExists(`level_${i}`)) {\n        i += 1;\n      }\n      indexName = `level_${i}`;\n    }\n\n    let data = Immutable.Map(this.columns.map(c => ([c, new Series(this.get(c).values)])));\n    if (!args.drop) data = data.set(indexName, new Series(this.index));\n\n    return new DataFrame(data);\n  }\n\n  /**\n   * Return new DataFrame subset at [rowIdx, colIdx]\n   *\n   * pandas equivalent: [DataFrame.iloc](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iloc.html)\n   *\n   * @param {number|Array.<number>} rowIdx\n   * @param {number|Array.<number>=} colIdx\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 3, z: 4}, {x: 3, y: 4, z: 5}]);\n   *\n   * // Returns DataFrame([{y: 3}], {index: [1]})\n   * df.iloc(1, 1);\n   *\n   * // Returns DataFrame([{y: 3, z: 4}}], {index: [1]})\n   * df.iloc(1, [1, 3]);\n   *\n   * // Returns DataFrame([{y: 3, z: 4}, {y: 4, z: 5}], {index: [1, 2]})\n   * df.iloc([1, 3], [1, 3]);\n   *\n   * // Returns DataFrame([{y: 3}, {y: 4}], {index: [1, 2]})\n   * df.iloc([1, 3], 1);\n   *\n   * // Returns DataFrame([{y: 2}, {y: 3}, {y: 4}], {index: [0, 1, 2]})\n   * df.iloc(1);\n   */\n  iloc(rowIdx: number | [number, number], colIdx?: number | [number, number]): any {\n    if (typeof rowIdx === 'number') {\n      if (typeof colIdx === 'number') {\n        if (colIdx < 0 || colIdx >= this.shape[1])\n          throw new Error('colIdx out of bounds');\n\n        const getCol = this.columns.get(colIdx);\n        return new DataFrame(\n          Immutable.Map([[getCol, this.get(getCol).iloc(rowIdx, rowIdx + 1)]]),\n          {index: this.index.slice(rowIdx, rowIdx + 1)});\n      } else if (Array.isArray(colIdx)) {\n        if (colIdx.length !== 2)\n          throw new Error('colIdx must be length 2 (start and end positions)');\n        if (colIdx[1] <= colIdx[0])\n          throw new Error('colIdx end position cannot be less than or equal tostart position');\n        if (colIdx[0] < 0 || colIdx[1] > this.shape[1])\n          throw new Error('colIdx position out of bounds');\n\n        return new DataFrame(\n          Immutable.Map(\n            Immutable.Range(colIdx[0], colIdx[1]).map((idx) => {\n              const getCol = this.columns.get(idx);\n              // $FlowFixMe TODO\n              return [getCol, this.get(getCol).iloc(rowIdx, rowIdx + 1)];\n            }).toArray()),\n          {index: this.index.slice(rowIdx, rowIdx + 1)});\n      } else if (typeof colIdx === 'undefined') {\n        return new DataFrame(\n          Immutable.Map(this.columns.map(c =>\n            // $FlowFixMe TODO\n            ([c, this.get(c).iloc(rowIdx, rowIdx + 1)])).toArray()),\n          {index: this.index.slice(rowIdx, rowIdx + 1)});\n      }\n\n      throw new TypeError('colIdx must be either integer or Array of integers');\n    } else if (Array.isArray(rowIdx)) {\n      if (typeof colIdx === 'number') {\n        if (colIdx < 0 || colIdx >= this.shape[1])\n          throw new Error('colIdx out of bounds');\n\n        const getCol = this.columns.get(colIdx);\n        return new DataFrame(\n          Immutable.Map([[getCol, this.get(getCol).iloc(rowIdx[0], rowIdx[1])]]),\n          {index: this.index.slice(rowIdx[0], rowIdx[1])});\n      } else if (Array.isArray(colIdx)) {\n        if (colIdx.length !== 2)\n          throw new Error('colIdx must be length 2 (start and end positions)');\n        if (colIdx[1] <= colIdx[0])\n          throw new Error('colIdx end position cannot be less than or equal tostart position');\n        if (colIdx[0] < 0 || colIdx[1] > this.shape[1])\n          throw new Error('colIdx position out of bounds');\n\n        return new DataFrame(\n          Immutable.Map(\n            Immutable.Range(colIdx[0], colIdx[1]).map((idx) => {\n              const getCol = this.columns.get(idx);\n              // $FlowFixMe TODO\n              return [getCol, this.get(getCol).iloc(rowIdx[0], rowIdx[1])];\n            }).toArray()),\n          {index: this.index.slice(rowIdx[0], rowIdx[1])});\n      } else if (typeof colIdx === 'undefined') {\n        return new DataFrame(\n          Immutable.Map(this.columns.map(c =>\n            // $FlowFixMe TODO\n            ([c, this.get(c).iloc(rowIdx[0], rowIdx[1])])).toArray()),\n          {index: this.index.slice(rowIdx[0], rowIdx[1])});\n      }\n\n      throw new TypeError('colIdx must be either integer or Array of integers');\n    }\n\n    throw new TypeError('rowIdx must be either integer or Array of integers');\n  }\n\n  /**\n   * Return new DataFrame composed of first n rows of this DataFrame\n   *\n   * pandas equivalent: [DataFrame.head](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.head.html)\n   *\n   * @param {number} n=10\n   *  Integer number of n rows to return from the DataFrame\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 5}]);\n   *\n   * // returns DataFrame([{x: 1, y: 2}, {x: 2, y: 3}])\n   * df.head(2);\n   */\n  head(n: number = 10): DataFrame {\n    return this.iloc([0, n]);\n  }\n\n  /**\n   * Return new DataFrame composed of last n rows of this DataFrame\n   *\n   * pandas equivalent: [DataFrame.tail](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.tail.html)\n   *\n   * @param {number} n=10\n   *  Integer number of n rows to return from the DataFrame\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}, {x: 4, y: 5}]);\n   *\n   * // returns DataFrame([{x: 3, y: 4}, {x: 4, y: 5}])\n   * df.tail(2);\n   */\n  tail(n: number = 10): DataFrame {\n    return this.iloc([this.length - n, this.length]);\n  }\n\n  _assertColumnExists(col: T_SK) {\n    if (!this.columnExists(col))\n      throw new Error(`Column ${col} not in DataFrame`);\n  }\n\n  columnExists(col: T_SK): boolean {\n    return this.columns.indexOf(col) >= 0;\n  }\n\n  /**\n   * Return the `Series` at the column\n   *\n   * pandas equivalent: df['column_name']\n   *\n   * @param {string|Array.<string>|Immutable.List.<string>|Immutable.Seq.<string>} columns\n   *    Name of the column to retrieve or list of columns to retrieve\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns Series([1, 2, 3], {name: 'x', index: [0, 1, 2]})\n   * df.get('x');\n   *\n   * // Returns DataFrame([{y: 2}, {y: 3}, {y: 4}])\n   * df.get(['y']);\n   */\n  get(columns: T_SK | Array<T_SK>): Series | DataFrame {\n    if ((typeof columns === 'string' || typeof columns === 'number') && this.columnExists(columns))\n      return this._data.get(columns);\n    else if (Array.isArray(columns) || columns instanceof Immutable.List\n      || columns instanceof Immutable.Seq) {\n      columns.forEach((c) => {\n        if (!this.columnExists(c)) throw new Error(`KeyError: ${c} not found`);\n      });\n      return new DataFrame(\n        Immutable.Map(columns.map(c => ([c, this.get(c)]))), this.kwargs);\n    }\n    throw new Error(`KeyError: ${columns} not found`);\n  }\n\n  /**\n   * Return an object of same shape as self and whose corresponding entries are from self\n   * where cond is True and otherwise are from other.\n   *\n   * pandas equivalent [DataFrame.where](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.where.html)\n   *\n   * @param {Array|List|Series|DataFrame|number|string} other\n   *  Iterable or value to compare to DataFrame\n   * @param {function} op\n   *  Function which takes (a, b) values and returns a boolean\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}]);\n   *\n   * // Returns DataFrame(Map({x: Series([true, false]), y: Series([false, true])})\n   * df.where(new Series([1, 3]), (a, b) => a === b);\n   *\n   * // Returns DataFrame(Map({x: Series([true, false]), y: Series([false, true])})\n   * df.where(new DataFrame(Map({\n   *    a: new Series([1, 1]),\n   *    b: new Series([3, 3])})),\n   *    (a, b) => a === b);\n   */\n  where(other: T_COTHER, op: (a: any, b: any) => boolean): DataFrame {\n    if (!(Array.isArray(other))\n      && !(other instanceof Immutable.List)\n      && !(other instanceof Series)\n      && !(other instanceof DataFrame)) {\n      // noinspection Eslint\n      return new DataFrame(Immutable.Map(this._data.mapEntries(([k, v]) => {\n        return [k, v.where(other, op)];\n      })));\n    } else if (Array.isArray(other) || other instanceof Series || other instanceof Immutable.List) {\n      if ((Array.isArray(other) || other instanceof Series) && other.length !== this.length)\n        throw new Error('Array or Series must be same length as DataFrame');\n      if (other instanceof Immutable.List && other.size !== this.length)\n        throw new Error('Immutable List must be same size as DataFrame');\n      // noinspection Eslint\n      return new DataFrame(Immutable.Map(this._data.mapEntries(([k, v]) => {\n        return [k, v.where(other, op)];\n      })));\n    } else if (other instanceof DataFrame) {\n      if (!other.shape.equals(this.shape))\n        throw new Error('DataFrame must have the same shape');\n      // noinspection Eslint\n      return new DataFrame(Immutable.Map(this._data.mapEntries(([k, v], idx) => {\n        // $FlowFixMe TODO\n        return [k, v.where(other.get(other.columns.get(idx)), op)];\n      })));\n    }\n\n    throw new Error('Unsupported comparison value, or non-matching lengths');\n  }\n\n  /**\n   * Equal to `DataFrame` and other, element wise\n   *\n   * pandas equivalent: df == val\n   *\n   * @param {Array|List|Series|DataFrame|number|string} other\n   *  Other Iterable or scalar value to check for equal to\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame(Map({x: new Series([1, 2]), y: new Series([2, 3])}));\n   *\n   * // Returns DataFrame(Map({x: Series([true, false]), y: Series([false, true])})\n   * df.eq(new Series([1, 3]));\n   *\n   * // Returns DataFrame(Map({x: Series([true, false]), y: Series([false, false])})\n   * df.gt(new DataFrame(Map({\n   *    a: new Series([1, 1]),\n   *    b: new Series([1, 2])})));\n   */\n  eq(other: T_COTHER): DataFrame {\n    return this.where(other, (a, b) => a === b);\n  }\n\n  /**\n   * Greater than of `DataFrame` and other, element wise\n   *\n   * pandas equivalent: df > val\n   *\n   * @param {Array|List|Series|DataFrame|number|string} other\n   *  Other Iterable or scalar value to check for greater than\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame(Map({x: new Series([1, 2]), y: new Series([2, 3])}));\n   *\n   * // Returns DataFrame(Map({x: Series([false, false]), y: Series([true, false])})\n   * df.gt(new Series([1, 3]));\n   *\n   * // Returns DataFrame(Map({x: Series([false, true]), y: Series([true, true])})\n   * df.gt(new DataFrame(Map({\n   *    a: new Series([1, 1]),\n   *    b: new Series([1, 2])})));\n   */\n  gt(other: T_COTHER): DataFrame {\n    return this.where(other, (a, b) => a > b);\n  }\n\n  /**\n   * Greater than or equal to of `DataFrame` and other, element wise\n   *\n   * pandas equivalent: df >= val\n   *\n   * @param {Array|List|Series|DataFrame|number|string} other\n   *  Other Iterable or scalar value to check for greater than or equal to\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame(Map({x: new Series([1, 2]), y: new Series([2, 3])}));\n   *\n   * // Returns DataFrame(Map({x: Series([true, false]), y: Series([true, true])})\n   * df.gte(new Series([1, 3]));\n   *\n   * // Returns DataFrame(Map({x: Series([true, true]), y: Series([true, true])})\n   * df.gte(new DataFrame(Map({\n   *    a: new Series([1, 1]),\n   *    b: new Series([1, 2])})));\n   */\n  gte(other: T_COTHER): DataFrame {\n    return this.where(other, (a, b) => a >= b);\n  }\n\n  /**\n   * Less than of `DataFrame` and other, element wise\n   *\n   * pandas equivalent: df < val\n   *\n   * @param {Array|List|Series|DataFrame|number|string} other\n   *  Other Iterable or scalar value to check for less than\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame(Map({x: new Series([1, 2]), y: new Series([2, 3])}));\n   *\n   * // Returns DataFrame(Map({x: Series([false, true]), y: Series([false, false])})\n   * df.lt(new Series([1, 3]));\n   *\n   * // Returns DataFrame(Map({x: Series([false, false]), y: Series([false, false])})\n   * df.lt(new DataFrame(Map({\n   *    a: new Series([1, 1]),\n   *    b: new Series([1, 2])})));\n   */\n  lt(other: T_COTHER): DataFrame {\n    return this.where(other, (a, b) => a < b);\n  }\n\n  /**\n   * Less than or equal to of `DataFrame` and other, element wise\n   *\n   * pandas equivalent: df <= val\n   *\n   * @param {Array|List|Series|DataFrame|number|string} other\n   *  Other Iterable or scalar value to check for less than or equal to\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame(Map({x: new Series([1, 2]), y: new Series([2, 3])}));\n   *\n   * // Returns DataFrame(Map({x: Series([true, true]), y: Series([false, true])})\n   * df.lte(new Series([1, 3]));\n   *\n   * // Returns DataFrame(Map({x: Series([true, false]), y: Series([false, false])})\n   * df.lte(new DataFrame(Map({\n   *    a: new Series([1, 1]),\n   *    b: new Series([1, 2])})));\n   */\n  lte(other: T_COTHER): DataFrame {\n    return this.where(other, (a, b) => a <= b);\n  }\n\n  /**\n   * Merge this `DataFrame` with another `DataFrame`, optionally on some set of columns\n   *\n   * pandas equivalent: `DataFrame.merge`\n   *\n   * @param {DataFrame} df\n   *    `DataFrame` with which to merge this `DataFrame`\n   * @param {Array} on\n   *    Array of columns on which to merge\n   * @param {string} how='inner'\n   *    Merge method, either 'inner' or 'outer'\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   * const df2 = new DataFrame([{x: 1, z: 3}, {x: 3, z: 5}, {x: 2, z: 10}]);\n   *\n   * // Returns\n   * //    x  |  y  |  z\n   * // 0  1  |  2  |  3\n   * // 1  2  |  3  |  10\n   * // 2  3  |  4  |  5\n   * df.merge(df2, ['x'], 'inner');\n   */\n  merge(df: DataFrame, on: Array<string | number>, how: string = 'inner'): DataFrame {\n    // eslint-disable-next-line\n    return mergeDataFrame(this, df, on, how);\n  }\n\n  /**\n   * Convert the `DataFrame` to a csv string\n   *\n   * pandas equivalent: [DataFrame.to_csv](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html)\n   *\n   * @returns {string}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns x,y,\\r\\n1,2,\\r\\n2,3\\r\\n3,4\\r\\n\n   * df.to_csv();\n   */\n  to_csv(): string {\n    let csvString = '';\n    this.columns.forEach((k) => {\n      csvString += `${k},`;\n    });\n    csvString += '\\r\\n';\n\n    const updateString = (idx) => {\n      let s = ''; // $FlowFixMe TODO\n      this.columns.forEach((k) => { s += `${this.get(k).iloc(idx)},`; });\n      return s;\n    };\n    for (let idx = 0; idx < this.length; idx += 1) {\n      csvString += updateString(idx);\n      csvString += '\\r\\n';\n    }\n\n    return csvString;\n  }\n\n  /**\n   * Write the `DataFrame` to a Workbook object\n   *\n   * @param {string|Workbook} excel_writer\n   *    File path or existing Workbook object\n   * @param {string} sheetName\n   *    Name of values which will contain DataFrame\n   * @param {boolean} download\n   *    Download the excel file?\n   * @param {Object} kwargs\n   * @param {boolean} kwargs.index=true\n   *\n   * @return {Workbook}\n   *\n   */ // eslint-disable-next-line\n  to_excel(excel_writer: string, sheetName: string = 'Sheet1', // eslint-disable-next-line\n           download: boolean = false, kwargs: Object = {index: true}) {\n    throw new Error('to_excel not yet implemented');\n    // let wb;\n    //\n    // const sheetObject = () => {\n    //   if (kwargs.index) {\n    //     const colRow = Immutable.List.of('').concat(this.columns.toList());\n    //     return new Sheet(\n    //       Immutable.List.of(colRow)\n    //         .concat(this.values.map((v, idx) =>\n    //  Immutable.List.of(this.index.get(idx)).concat(v))));\n    //   }\n    //\n    //   return new Sheet(Immutable.List.of(this.columns.toList()).concat(this.values));\n    // };\n    //\n    // if (excel_writer instanceof Workbook) {\n    //   wb = excel_writer.copy();\n    //   wb.addSheet(sheetName, sheetObject());\n    // } else if (typeof excel_writer === 'string') {\n    //   wb = new Workbook();\n    //   wb.addSheet(sheetName, sheetObject());\n    // } else throw new Error('excel_writer must be a file path or Workbook object');\n    //\n    // function s2ab(s) {\n    //   const buf = new ArrayBuffer(s.length);\n    //   const view = new Uint8Array(buf);\n    //   for (let i = 0; i < s.length; i += 1) { // noinspection Eslint\n    //     view[i] = s.charCodeAt(i) & 0xFF;\n    //   }\n    //   return buf;\n    // }\n    //\n    // if (download) {\n    //   saveAs(new Blob([s2ab(wb.writeWorkbook())],\n    //     {type: \"application/octet-stream\"}),\n    //     typeof excel_writer === 'string' ? excel_writer : 'StratoDem Download.xlsx');\n    // }\n    //\n    // return wb;\n  }\n\n  /**\n   * Convert the DataFrame to a json object\n   *\n   * pandas equivalent: [DataFrame.to_json](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_json.html)\n   *\n   * @param kwargs\n   * @param {string} [kwargs.orient=columns] orientation of JSON\n   *\n   * @returns {*}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns {x: {0: 1, 1: 2, 2: 3}, y: {0: 1, 1: 2, 2: 3}}\n   * df.to_json();\n   *\n   * // Returns [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]\n   * df.to_json({orient: 'records'});\n   *\n   * // Returns {0: {x: 1, y: 2}, 1: {x: 2, y: 3}, 2: {x: 3, y: 4}}\n   * df.to_json({orient: 'index'});\n   *\n   * // Returns {index: [0, 1, 2], columns: ['x', 'y'], values: [[1, 2], [2, 3], [3, 4]]}\n   * df.to_json({orient: 'split'});\n   *\n   * // Returns [[1, 2], [2, 3], [3, 4]]\n   * df.to_json({orient: 'values'});\n   */\n  to_json(kwargs: Object = {orient: 'columns'}): Object {\n    const ALLOWED_ORIENT = ['records', 'split', 'index', 'values', 'columns'];\n    let orient = 'columns';\n\n    if (typeof kwargs.orient !== 'undefined') {\n      if (ALLOWED_ORIENT.indexOf(kwargs.orient) < 0)\n        throw new TypeError(`orient must be in ${ALLOWED_ORIENT.toString()}`);\n      orient = kwargs.orient;\n    }\n\n    let json;\n    switch (orient) {\n      case 'records':\n        return this.values.map((row) => {\n          const rowObj = {};\n          row.forEach((val, idx) => { rowObj[this.columns.get(idx)] = val; });\n          return rowObj;\n        }).toArray();\n      case 'split':\n        return {\n          index: this.index.toArray(),\n          columns: this.columns.toArray(),\n          values: this.values.toJS(),\n        };\n      case 'index':\n        json = {};\n        this.values.forEach((row, idx) => {\n          const rowObj = {};\n          row.forEach((val, idx2) => { rowObj[this.columns.get(idx2)] = val; });\n          json[this.index.get(idx)] = rowObj;\n        });\n        return json;\n      case 'values':\n        return this.values.toJS();\n      case 'columns':\n        json = {};\n        this.columns.forEach((c) => {\n          json[c] = this.get(c).to_json({orient: 'index'});\n        });\n        return json;\n      default:\n        throw new TypeError(`orient must be in ${ALLOWED_ORIENT.toString()}`);\n    }\n  }\n\n  /**\n   * Return the sum of the values in the `DataFrame` along the axis\n   *\n   * pandas equivalent: [DataFrame.sum](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sum.html)\n   *\n   * @param {number} axis=0\n   *    Axis along which to sum values\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * // x  6\n   * // y  9\n   * // Name: , dtype: dtype(int)\n   * df.sum().toString();\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * // 0  3\n   * // 1  5\n   * // 2  7\n   * // Name: , dtype: dtype('int')\n   * df.sum(1).toString();\n   */\n  sum(axis: number = 0): DataFrame {\n    if (axis === 0) {\n      return new Series(\n        this.columns.toArray().map(k => this.get(k).sum()),\n        {index: this.columns.toArray()});\n    } else if (axis === 1) {\n      return new Series(\n        Immutable.Range(0, this.length).map(idx =>\n          this.values.get(idx).reduce((s, k) => s + k, 0)).toList(),\n        {index: this.index});\n    }\n\n    throw new InvalidAxisError();\n  }\n\n  /**\n   * Return the mean of the values in the `DataFrame` along the axis\n   *\n   * pandas equivalent: [DataFrame.mean](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mean.html)\n   *\n   * @param {number} axis=0\n   *    Axis along which to average values\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * // x  2\n   * // y  3\n   * // Name: , dtype: dtype('int')\n   * df.mean().toString();\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * // 0  1.5\n   * // 1  2.5\n   * // 2  3.5\n   * // Name: , dtype: dtype('float')\n   * df.mean(1).toString();\n   */\n  mean(axis: number = 0): DataFrame {\n    if (axis === 0) {\n      return new Series(\n        this.columns.toArray().map(k => this.get(k).mean()),\n        {index: this.columns.toArray()});\n    } else if (axis === 1) {\n      return new Series(\n        Immutable.Range(0, this.length).map(idx =>\n          this.values.get(idx).reduce((s, k) =>\n            s + (k / this.columns.size), 0)).toList(),\n        {index: this.index});\n    }\n\n    throw new InvalidAxisError();\n  }\n\n  /**\n   * Return the standard deviation of the values in the `DataFrame` along the axis\n   *\n   * pandas equivalent: [DataFrame.std](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.std.html)\n   *\n   * @param {number} axis=0\n   *    Axis along which to calculate the standard deviation\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * // x  1\n   * // y  1\n   * // Name: , dtype: dtype('int')\n   * df.std().toString();\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}]);\n   *\n   * // Returns\n   * // 0  0\n   * // 1  0\n   * // 2  0\n   * // Name: , dtype: dtype('int')\n   * df.std(1).toString();\n   */\n  std(axis: number = 0): DataFrame {\n    if (axis === 0) {\n      return new Series(\n        this.columns.toArray().map(k => this.get(k).std()),\n        {index: this.columns.toArray()});\n    } else if (axis === 1) {\n      return this.variance(axis).map(v => Math.sqrt(v));\n    }\n\n    throw new InvalidAxisError();\n  }\n\n  /**\n   * Return the variance of the values in the `DataFrame` along the axis\n   *\n   * pandas equivalent: [DataFrame.var](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.var.html)\n   *\n   * @param {number} axis=0\n   *    Axis along which to calculate the variance\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * // x  1\n   * // y  1\n   * // Name: , dtype: dtype('int')\n   * df.std().toString();\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}]);\n   *\n   * // Returns\n   * // 0  0\n   * // 1  0\n   * // 2  0\n   * // Name: , dtype: dtype('int')\n   * df.std(1).toString();\n   */\n  variance(axis: number = 0): DataFrame {\n    if (axis === 0) {\n      return new Series(\n        this.columns.toArray().map(k => this.get(k).variance()),\n        {index: this.columns.toArray()});\n    } else if (axis === 1) {\n      const means = this.mean(axis).values;\n      return new Series(\n        Immutable.Range(0, this.length).map(idx =>\n          this.values.get(idx).reduce((s, k) => {\n            const diff = k - means.get(idx);\n            return s + ((diff * diff) / (this.columns.size - 1));\n          }, 0)).toArray(),\n        {index: this.index});\n    }\n\n    throw new InvalidAxisError();\n  }\n\n  _pairwiseDataFrame(func: (Series, Series) => Series): DataFrame {\n    // Apply the func between all Series in the DataFrame, takes two series and returns a value\n    const valArray = [];\n\n    // Calculate upper triangle\n    for (let idx1 = 0; idx1 < this.columns.size; idx1 += 1) {\n      valArray.push({});\n      const ds1 = this.get(this.columns.get(idx1));\n\n      for (let idx2 = idx1; idx2 < this.columns.size; idx2 += 1) {\n        const col2 = this.columns.get(idx2);\n        const ds2 = this.get(col2);\n        valArray[idx1][col2] = func(ds1, ds2);\n      }\n    }\n\n    // Take upper triangle and fill in lower triangle\n    for (let idx1 = 0; idx1 < this.columns.size; idx1 += 1) {\n      const col1 = this.columns.get(idx1);\n      for (let idx2 = idx1 + 1; idx2 < this.columns.size; idx2 += 1) {\n        const col2 = this.columns.get(idx2);\n        valArray[idx2][col1] = valArray[idx1][col2];\n      }\n    }\n\n    return new DataFrame(valArray, {index: this.columns.toList()});\n  }\n\n  /**\n   * Calculate the covariance between all `Series` in the `DataFrame`\n   *\n   * pandas equivalent: [DataFrame.cov](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cov.html)\n   *\n   * @return {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 1, z: 5}, {x: 3, y: 0, z: 7}]);\n   *\n   * // Returns DataFrame([{x: 1, y: -1, z: 2}, {x: -1, y: 1, z: -2}, {x: 2, y: -2, z: 4}])\n   * df.cov();\n   */\n  cov(): DataFrame { // $FlowFixMe TODO\n    return this._pairwiseDataFrame((ds1, ds2) => ds1.cov(ds2));\n  }\n\n  /**\n   * Calculate the correlation between all `Series` in the `DataFrame`\n   *\n   * pandas equivalent: [DataFrame.corr](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.corr.html)\n   *\n   * @return {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2, z: 3}, {x: 2, y: 1, z: 5}, {x: 3, y: 0, z: 7}]);\n   *\n   * // Returns DataFrame([{x: 1, y: -1, z: 1}, {x: -1, y: 1, z: -1}, {x: 1, y: -1, z: 1}])\n   * df.corr();\n   */\n  corr(): DataFrame {\n    // noinspection Eslint\n    const corrFunc = (ds1, ds2) => { // $FlowFixMe TODO\n      return ds1.values === ds2.values ? 1 : ds1.corr(ds2);\n    };\n    return this._pairwiseDataFrame(corrFunc);\n  }\n\n  /**\n   * Return the difference over a given number of periods along the axis\n   *\n   * pandas equivalent: [DataFrame.diff](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.diff.html)\n   *\n   * @param {number} periods=1\n   *    Number of periods to use for difference calculation\n   * @param {number} axis=0\n   *    Axis along which to calculate difference\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * //    x    |  y\n   * // 0  null |  null\n   * // 1  1    |  1\n   * // 2  1  |  1\n   * df.diff().toString();\n   */\n  diff(periods: number = 1, axis: number = 0): DataFrame {\n    if (typeof periods !== 'number' || !Number.isInteger(periods))\n      throw new Error('periods must be an integer');\n    if (periods <= 0)\n      throw new Error('periods must be positive');\n\n    if (axis === 0) {\n      return new DataFrame(\n        Immutable.Map(this.columns.map(k => [k, this._data.get(k).diff(periods)])),\n        {index: this.index});\n    } else if (axis === 1) {\n      return new DataFrame(\n        Immutable.Map(this.columns.map((k, idx) => {\n          if (idx < periods)\n            return [k, new Series(Immutable.Repeat(null, this.length).toList(),\n              {name: k, index: this.index})];\n          const compareCol = this.get(this.columns.get(idx - periods)); // $FlowFixMe TODO\n          return [k, this.get(k).map((v, vIdx) => v - compareCol.iloc(vIdx))];\n        })), {index: this.index});\n    }\n\n    throw new InvalidAxisError();\n  }\n\n  /**\n   * Return the percentage change over a given number of periods along the axis\n   *\n   * pandas equivalent: [DataFrame.pct_change](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pct_change.html)\n   *\n   * @param {number} periods=1\n   *    Number of periods to use for percentage change calculation\n   * @param {number} axis=0\n   *    Axis along which to calculate percentage change\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}]);\n   *\n   * // Returns\n   * //    x    |  y\n   * // 0  null |  null\n   * // 1  1    |  0.5\n   * // 2  0.5  |  0.3333\n   * df.pct_change().toString();\n   */\n  pct_change(periods: number = 1, axis: number = 0): DataFrame {\n    if (typeof periods !== 'number' || !Number.isInteger(periods))\n      throw new Error('periods must be an integer');\n    if (periods <= 0)\n      throw new Error('periods must be positive');\n\n    if (axis === 0) {\n      return new DataFrame(\n        Immutable.Map(this.columns.map(k => [k, this._data.get(k).pct_change(periods)])),\n        {index: this.index});\n    } else if (axis === 1) {\n      return new DataFrame(\n        Immutable.Map(this.columns.map((k, idx) => {\n          if (idx < periods)\n            return [k, new Series(Immutable.Repeat(null, this.length).toList(),\n              {name: k, index: this.index})];\n          const compareCol = this.get(this.columns.get(idx - periods));\n          // $FlowFixMe TODO\n          return [k, this.get(k).map((v, vIdx) => (v / compareCol.iloc(vIdx)) - 1)];\n        })), {index: this.index});\n    }\n\n    throw new InvalidAxisError();\n  }\n\n  /**\n   * Filter the DataFrame by an Iterable (Series, Array, or List) of booleans and return the subset\n   *\n   * pandas equivalent: df[df condition]\n   *\n   * @param {Series|Array|List} iterBool\n   *    Iterable of booleans\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df = new DataFrame(Immutable.Map({x: new Series([1, 2]), y: new Series([2, 3])}));\n   *\n   * // Returns DataFrame(Immutable.Map({x: Series([2]), y: Series([3]));\n   * df.filter(df.get('x').gt(1));\n   *\n   * // Returns DataFrame(Immutable.Map({x: Series([2]), y: Series([3]));\n   * df.filter([false, true]);\n   *\n   * // Returns DataFrame(Immutable.Map({x: Series([2]), y: Series([3]));\n   * df.filter(Immutable.Map([false, true]));\n   */\n  filter(iterBool: Array<boolean> | Series | Immutable.List<boolean>): DataFrame {\n    if (!Array.isArray(iterBool)\n      && !(iterBool instanceof Immutable.List)\n      && !(iterBool instanceof Series))\n      throw new Error('filter must be an Array, List, or Series');\n\n    if (Array.isArray(iterBool) && iterBool.length !== this.length)\n      throw new Error('Array must be of equal length to DataFrame');\n    else if (iterBool instanceof Immutable.List && iterBool.size !== this.length)\n      throw new Error('List must be of equal length to DataFrame');\n    else if (iterBool instanceof Series && iterBool.length !== this.length)\n      throw new Error('Series must be of equal length to DataFrame');\n\n    // noinspection Eslint\n    return new DataFrame(Immutable.Map(this._data.mapEntries(([k, v]) => {\n      return [k, v.filter(iterBool)];\n    })));\n  }\n\n  /**\n   * Reshape data (produce a 'pivot' table) based on column values. Uses unique values from\n   * index / columns to form axes of the resulting DataFrame.\n   *\n   * pandas equivalent: [DataFrame.pivot](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html)\n   *\n   * @param {string|number} index\n   *  Name of the column to use as index\n   * @param {string|number} columns\n   *  Name of the column to use as column values\n   * @param {string|number} values\n   *  Name of the column to use as the value\n   *\n   * @returns {DataFrame}\n   */\n  pivot(index: T_SK, columns: T_SK, values: T_SK): DataFrame {\n    let uniqueVals = Immutable.Map({});\n    let uniqueCols = Immutable.List([]);\n\n    this.index.forEach((v: T_SK, idx: number) => {\n      const idxVal = this.get(index).iloc(idx);\n      const colVal = this.get(columns).iloc(idx);\n\n      if (uniqueVals.hasIn([idxVal, colVal]))\n        throw new Error('pivot index and column must be unique');\n\n      const val = this.get(values).iloc(idx);\n\n      uniqueVals = uniqueVals.setIn([idxVal, colVal], val);\n      if (!uniqueCols.has(colVal))\n        uniqueCols = uniqueCols.push(colVal);\n    });\n    const sortedIndex = uniqueVals.keySeq().sort().toArray();\n    const sortedColumns = uniqueCols.sort();\n\n    const data = Immutable.OrderedMap(\n      sortedColumns.map((col: T_SK) =>\n        ([\n          col,\n          new Series(\n            sortedIndex.map((idx) => {\n              const val = uniqueVals.getIn([idx, col]);\n              return typeof val === 'undefined' ? null : val;\n            }),\n            {name: col, index: sortedIndex}),\n        ])));\n\n    return new DataFrame(data, {index: sortedIndex});\n  }\n\n  /**\n   * Reshape data (produce a 'pivot' table) based on a set of index, columns, or values\n   * columns from the original DataFrame\n   *\n   * @param {Array<string>|Immutable.List|string|number} index\n   *  Name(s) of column(s) to use as the index for the pivoted DataFrame\n   * @param {Array<string>|Immutable.List|string|number} columns\n   *  Name(s) of column(s) to use as the columns for the pivoted DataFrame\n   * @param {Array<string>|Immutable.List|string|number} values\n   *  Name(s) of column(s) to use as the values for the pivoted DataFrame\n   * @param {string} aggfunc\n   *  Name of aggregation function\n   */\n  // eslint-disable-next-line\n  pivot_table(index: T_PVINDEX, columns: T_PVINDEX, values: T_PVINDEX, // eslint-disable-next-line\n              aggfunc: string = 'sum'): any {\n    throw new Error('Not implemented');\n    // const validateCols = (cols: T_PVINDEX): Immutable.List => {\n    //   if (Array.isArray(cols)) {\n    //     cols.forEach(c => this._assertColumnExists(c));\n    //     return Immutable.List(cols);\n    //   } else if (cols instanceof Immutable.List) {\n    //     cols.forEach(c => this._assertColumnExists(c));\n    //     return cols;\n    //   } else if (typeof cols === 'string') {\n    //     this._assertColumnExists(cols);\n    //     return Immutable.List.of(cols);\n    //   }\n    //\n    //   throw new TypeError('cols must be Array, Immutable.List, or string');\n    // };\n    //\n    // // Validate types and cast to Immutable.List of column names\n    // const indexCols = validateCols(index);\n    // const columnCols = validateCols(columns);\n    // const valuesCols = validateCols(values);\n    //\n    // let pivotMap = Immutable.Map({});\n    //\n    // this.index.map((indexVal, idx) => {\n    //   const key = indexCols.map(c => this.get(c).iloc(idx))\n    //     .concat(columnCols.map(c => this.get(c).iloc(idx)));\n    //   let val = this.get(valuesCols.get(0)).iloc(idx);\n    //   if (pivotMap.has(key)) {\n    //     switch (aggfunc) {\n    //       case 'sum':\n    //         val += pivotMap.get(key);\n    //         break;\n    //       default:\n    //         throw new Error('not implemented for aggs');\n    //     }\n    //   }\n    //\n    //   // This pivotMap has indexCols.size keys then columnCols.size keys which point to the value\n    //   pivotMap = pivotMap.set(key, val);\n    // });\n    //\n    // let indexMap = Immutable.OrderedMap({});\n    // let columnsMap = Immutable.OrderedMap({});\n    //\n    // pivotMap.entrySeq().forEach(([k, v]) => {\n    //   const indexKey = k.slice(0, indexCols.size - 1);\n    //   console.log(k);\n    //   console.log(indexKey);\n    //   if (indexMap.hasIn(indexKey))\n    //     indexMap = indexMap.setIn(\n    //       indexKey, indexMap.getIn(indexKey).concat([k[indexCols.size - 1]]));\n    //   else indexMap = indexMap.setIn(\n    //     indexKey, Immutable.List.of(k[indexCols.size - 1]));\n    //   columnsMap = columnsMap.setIn(k.slice(indexCols.size, k.length));\n    // });\n    //\n    // console.log(indexMap);\n    // console.log(columnsMap);\n    // return pivotMap;\n  }\n\n  _cumulativeHelper(operation: string = OP_CUMSUM, axis: number = 0): DataFrame {\n    if (axis === 0) {\n      return new DataFrame(\n        Immutable.Map(this.columns.map(\n          c => ([c, this.get(c)._cumulativeHelper(operation)]))), this.kwargs);\n    } else if (axis === 1) {\n      return new DataFrame(\n        this.values.map(row => generateCumulativeFunc(operation)(row)),\n        this.kwargs);\n    }\n    throw new Error('invalid axis');\n  }\n\n  /**\n   * Return cumulative sum over requested axis\n   *\n   * pandas equivalent: [DataFrame.cumsum](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cumsum.html)\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const ds = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n   *\n   * // Returns DataFrame([{x: 1, y: 2}, {x: 3, y: 5}, {x: 6, y: 9}], {index: [2, 3, 4]});\n   * ds.cumsum();\n   *\n   * // Returns DataFrame([{x: 1, y: 3}, {x: 2, y: 5}, {x: 3, y: 7}], {index: [2, 3 ,4]});\n   * ds.cumsum(1);\n   */\n  cumsum(axis: number = 0): DataFrame {\n    return this._cumulativeHelper(OP_CUMSUM, axis);\n  }\n\n  /**\n   * Return cumulative multiple over requested axis\n   *\n   * pandas equivalent: [DataFrame.cummul](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cummul.html)\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const ds = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n   *\n   * // Returns DataFrame([{x: 1, y: 2}, {x: 2, y: 6}, {x: 6, y: 24}], {index: [2, 3, 4]});\n   * ds.cummul();\n   *\n   * // Returns DataFrame([{x: 1, y: 2}, {x: 2, y: 6}, {x: 3, y: 12}], {index: [2, 3 ,4]});\n   * ds.cummul(1);\n   */\n  cummul(axis: number = 0): DataFrame {\n    return this._cumulativeHelper(OP_CUMMUL, axis);\n  }\n\n  /**\n   * Return cumulative maximum over requested axis\n   *\n   * pandas equivalent: [DataFrame.cummax](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cummax.html)\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const ds = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n   *\n   * // Returns DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n   * ds.cummax();\n   *\n   * // Returns DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3 ,4]});\n   * ds.cummax(1);\n   */\n  cummax(axis: number = 0): DataFrame {\n    return this._cumulativeHelper(OP_CUMMAX, axis);\n  }\n\n  /**\n   * Return cumulative minimum over requested axis\n   *\n   * pandas equivalent: [DataFrame.cummin](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cummin.html)\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const ds = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [2, 3, 4]});\n   *\n   * // Returns DataFrame([{x: 1, y: 1}, {x: 1, y: 1}, {x: 1, y: 1}], {index: [2, 3, 4]});\n   * ds.cummin();\n   *\n   * // Returns DataFrame([{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}], {index: [2, 3 ,4]});\n   * ds.cummin(1);\n   */\n  cummin(axis: number = 0): DataFrame {\n    return this._cumulativeHelper(OP_CUMMIN, axis);\n  }\n\n  /**\n   * Rename the `DataFrame` and return a new DataFrame\n   *\n   * pandas equivalent: [DataFrame.rename](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.rename.html)\n   *\n   * @param {Immutable.Map} columns\n   * @returns {DataFrame}\n   */\n  rename({ columns }: {columns: Immutable.Map}): DataFrame {\n    return new DataFrame(Immutable.OrderedMap(this.columns.map((prevCol) => {\n      const nextCol = columns.get(prevCol);\n      if (typeof nextCol === 'undefined')\n        return [prevCol, this._data.get(prevCol)];\n      return [nextCol, this._data.get(prevCol).rename(nextCol)];\n    })), {index: this.index});\n  }\n\n  /**\n   * Append another DataFrame to this and return a new DataFrame\n   *\n   * pandas equivalent: [DataFrame.append](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.append.html)\n   *\n   * @param {DataFrame} other\n   * @param {boolean} ignore_index\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}], {index: [1, 2]});\n   * const df2 = new DataFrame([{x: 2, y: 2}, {x: 3, y: 3}], {index: [2, 3]});\n   *\n   * // Returns DataFrame(\n   * //  [{x: 1, y: 2}, {x: 2, y: 3}, {x: 2, y: 2}, {x: 3, y: 3}],\n   * //  {index: [1, 2, 2, 3]});\n   * df1.append(df2);\n   *\n   * // Returns DataFrame(\n   * //  [{x: 1, y: 2}, {x: 2, y: 3}, {x: 2, y: 2}, {x: 3, y: 3}],\n   * //  {index: [0, 1, 2, 3]});\n   * df1.append(df2, true);\n   */\n  append(other: DataFrame, ignore_index: boolean = false): DataFrame {\n    // eslint-disable-next-line\n    return _concatDataFrame(// $FlowFixMe\n      [this, other],\n      {ignore_index});\n  }\n\n  /**\n   * Transpose the DataFrame by switching the index and columns\n   *\n   * pandas equivalent: [DataFrame.transpose](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.transpose.html)\n   *\n   * @returns {DataFrame}\n   *\n   * @example\n   * const df1 = new DataFrame([{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}], {index: [1, 2, 3]});\n   *\n   * // Returns DataFrame(\n   * //  [{1: 1, 2: 2, 3: 3}, {1: 2, 2: 3, 3: 4}], {index: ['x', 'y']});\n   * df1.transpose();\n   */\n  transpose(): DataFrame {\n    return new DataFrame(\n      Immutable.OrderedMap(\n        this.index.map((index, idx) =>\n          ([index, new Series(this.values.get(idx), {index: this.columns.toList()})]))));\n  }\n}\n\nconst innerMerge = (df1: DataFrame, df2: DataFrame, on: Array<string | number>): DataFrame => {\n  const data = [];\n\n  const cols1 = nonMergeColumns(df1.columns, on);\n  const cols2 = nonMergeColumns(df2.columns, on);\n\n  const intersectCols = intersectingColumns(cols1, cols2);\n  intersectCols.count(); // Cache intersectCols size\n\n  const cols1Rename = cols1.map(k => (\n    intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n      ? `${k}_x`\n      : k));\n\n  const cols2Rename = cols2.map(k => (\n    intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n      ? `${k}_y`\n      : k));\n\n  // eslint-disable-next-line\n  for (const [row1, _1] of df1.iterrows()) { // eslint-disable-next-line\n    for (const [row2, _2] of df2.iterrows()) {\n      let match = true; // eslint-disable-next-line\n      for (const c of on) {\n        if (row1.get(c) !== row2.get(c)) {\n          match = false;\n          break;\n        }\n      }\n\n      if (match) {\n        const rowData = {};\n\n        on.forEach((k) => {\n          rowData[k] = row1.get(k);\n        });\n\n        cols1.forEach((k, idx) => {\n          rowData[cols1Rename.get(idx)] = row1.get(k);\n        });\n\n        cols2.forEach((k, idx) => {\n          rowData[cols2Rename.get(idx)] = row2.get(k);\n        });\n\n        data.push(rowData);\n      }\n    }\n  }\n\n  return new DataFrame(data);\n};\n\nconst outerMerge = (df1: DataFrame, df2: DataFrame, on: Array<string | number>): DataFrame => {\n  const data = [];\n\n  const cols1 = nonMergeColumns(df1.columns, on);\n  const cols2 = nonMergeColumns(df2.columns, on);\n\n  const intersectCols = intersectingColumns(cols1, cols2);\n  intersectCols.count(); // Cache intersectCols size\n\n  const matched1 = new Array(df1.length).fill(false);\n  const matched2 = new Array(df2.length).fill(false);\n\n  // eslint-disable-next-line\n  for (const [row1, idx_1] of df1.iterrows()) { // eslint-disable-next-line\n    for (const [row2, idx_2] of df2.iterrows()) {\n      let match = true; // eslint-disable-next-line\n      for (const c of on) {\n        if (row1.get(c) !== row2.get(c)) {\n          match = false;\n          break;\n        }\n      }\n      const rowData = {};\n\n      on.forEach((k) => {\n        rowData[k] = row1.get(k);\n      });\n\n      cols1.forEach((k) => {\n        const nextColName = intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n          ? `${k}_x`\n          : k;\n        rowData[nextColName] = row1.get(k);\n      });\n\n      if (match) {\n        cols2.forEach((k) => {\n          const nextColName = intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n            ? `${k}_y`\n            : k;\n          rowData[nextColName] = row2.get(k);\n        });\n        data.push(rowData);\n        matched1[idx_1] = true;\n        matched2[idx_2] = true;\n      }\n    }\n  }\n\n  matched1.forEach((m, idx) => {\n    if (!m) {\n      const rowData = {};\n      on.forEach((k) => {\n        rowData[k] = df1.get(k).iloc(idx);\n      });\n\n      cols1.forEach((k) => {\n        const nextColName = intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n          ? `${k}_x`\n          : k;\n        rowData[nextColName] = df1.get(k).iloc(idx);\n      });\n\n      cols2.forEach((k) => {\n        const nextColName = intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n          ? `${k}_y`\n          : k;\n        rowData[nextColName] = null;\n      });\n      data.push(rowData);\n    }\n  });\n\n  matched2.forEach((m, idx) => {\n    if (!m) {\n      const rowData = {};\n      on.forEach((k) => {\n        rowData[k] = df2.get(k).iloc(idx);\n      });\n\n      cols1.forEach((k) => {\n        const nextColName = intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n          ? `${k}_x`\n          : k;\n        rowData[nextColName] = null;\n      });\n\n      cols2.forEach((k) => {\n        const nextColName = intersectCols.size > 0 && intersectCols.indexOf(k) >= 0\n          ? `${k}_y`\n          : k;\n        rowData[nextColName] = df2.get(k).iloc(idx);\n      });\n      data.push(rowData);\n    }\n  });\n\n  return new DataFrame(data);\n};\n\nexport const mergeDataFrame = (df1: DataFrame, df2: DataFrame, on: Array<string | number>,\n                               how: string = 'inner'): DataFrame => {\n  let mergeOn;\n  if (typeof on === 'undefined') {\n    mergeOn = df1.columns.filter(c1 => df2.columns.filter(c2 => c1 === c2).size > 0);\n    if (mergeOn.size === 0)\n      throw new Error('No common keys');\n  } else {\n    on.forEach((col) => {\n      if (!df1.columnExists(col) || !df2.columnExists(col))\n        throw new Error(`KeyError: ${col} not found`);\n    });\n    mergeOn = on;\n  }\n\n  switch (how) {\n    case 'inner':\n      return innerMerge(df1, df2, mergeOn);\n    case 'outer':\n      return outerMerge(df1, df2, mergeOn);\n    default:\n      throw new Error(`MergeError: ${how} not a supported merge type`);\n  }\n};\n\n// Concat\ntype T_KWARGS = {ignore_index: boolean, axis?: 0 | 1};\nexport const _concatDataFrame = (objs: Array<DataFrame> | Immutable.List<DataFrame>,\n                                 kwargs: T_KWARGS): DataFrame => {\n  if (!(objs instanceof Immutable.List || Array.isArray(objs)))\n    throw new Error('objs must be List or Array');\n\n  if (objs instanceof Immutable.List\n    && objs.filter(frame => frame instanceof DataFrame).size !== objs.size)\n    throw new Error('Objects must all be DataFrame');\n  else if (Array.isArray(objs)\n    && objs.filter(frame => frame instanceof DataFrame).length !== objs.length)\n    throw new Error('Objects must all be DataFrame');\n\n  if (Array.isArray(objs) && objs.length === 1)\n    return objs[0];\n  else if (objs instanceof Immutable.List && objs.size === 1)\n    return objs.get(0);\n\n  let seriesOrderedMap = Immutable.OrderedMap({});\n  if (kwargs.axis === 1) {\n    objs.forEach((df: DataFrame) => {\n      df.columns.forEach((column: string) => {\n        const columnExists = seriesOrderedMap.has(column);\n        seriesOrderedMap = seriesOrderedMap.set(\n          columnExists ? `${column}.x` : column, // $FlowFixMe\n          columnExists ? df.get(column).rename(`${column}.x`) : df.get(column));\n      });\n    });\n  } else {\n    objs.forEach((df: DataFrame) => {\n      const lenSeriesInMap = seriesOrderedMap.keySeq().size === 0\n        ? 0\n        : seriesOrderedMap.first().length;\n      const nextLength = df.length + lenSeriesInMap;\n\n      seriesOrderedMap = Immutable.OrderedMap(\n        // Get entries already concated (already in seriesOrderedMap)\n        seriesOrderedMap.entrySeq().map(([column, series]) => {\n          if (df.columnExists(column))\n            return [\n              column, // $FlowFixMe\n              _concatSeries([series, df.get(column)], kwargs)];\n          return [\n            column, // $FlowFixMe\n            _concatSeries([\n              series,\n              new Series(Immutable.Repeat(NaN, df.length).toList(), {index: df.index})],\n            kwargs)]; // Now merge with columns only in the \"right\" DataFrame\n        })).merge(Immutable.OrderedMap(\n        df.columns\n          .filter(column => !seriesOrderedMap.has(column))\n          .map(column => // $FlowFixMe\n            ([column, lenSeriesInMap === 0 ? df.get(column) : _concatSeries([\n              new Series(Immutable.Repeat(NaN, nextLength)),\n              df.get(column)],\n            kwargs)]))));\n    });\n  }\n\n  return new DataFrame(seriesOrderedMap);\n};\n"]}