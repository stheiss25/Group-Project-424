{"version":3,"sources":["../../es6/core/series.js"],"names":[],"mappings":"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","file":"series.js","sourcesContent":["/**\n * @flow\n * A pandas.Series one-dimensional array with axis labels, with an Immutable.List instead of\n * numpy.ndarray as the values\n */\n\nimport Immutable from 'immutable';\n\nimport NDFrame from './generic';\nimport {enumerate, sum, parseIndex, round10,\n  OP_CUMSUM, OP_CUMMUL, OP_CUMMAX, OP_CUMMIN, generateCumulativeFunc} from './utils';\nimport {DType, arrayToDType} from './dtype';\n\ndeclare type T_MF = (value: number, idx: number) => number | string;\ndeclare type T_BF = (value1: number, value2: number) => boolean;\n\n\nexport default class Series extends NDFrame {\n  /**\n   * One dimensional array with axis labels. An `Immutable.List` serves as the numpy.ndarray for\n   * values.\n   *\n   * Operations between `Series` (+, -, /, *, **) align values based on their associated index\n   * values\n   *\n   * @param {Array|List} data\n   *    Data to be stored in Series\n   * @param {Object} kwargs\n   *    Extra optional arguments for a Series\n   * @param {string} [kwargs.name='']\n   *    The _name to assign to the Series\n   * @param {Array|List} [kwargs.index]\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'My test name', index: [2, 3, 4, 5]})\n   * ds.toString()\n   * // Returns:\n   * // 2  1\n   * // 3  2\n   * // 4  3\n   * // 5  4\n   * // Name: My test name, dtype: dtype(int)\n   */\n  constructor(data: Array<Object> | Object, kwargs: Object = {}) {\n    super(data, kwargs);\n\n    if (Array.isArray(data)) {\n      this._values = Immutable.List(data);\n      this._dtype = arrayToDType(data);\n    } else if (data instanceof Immutable.List) {\n      this._values = data;\n      this._dtype = arrayToDType(data);\n    } else {\n      this._values = Immutable.List.of(data);\n      this._dtype = arrayToDType([data]);\n    }\n\n    this._name = typeof kwargs.name !== 'undefined' ? kwargs.name : '';\n\n    this.set_axis(0, parseIndex(kwargs.index, this.values));\n    this._setup_axes(Immutable.List.of(0));\n\n    // $FlowFixMe TODO\n    this._sort_ascending = this._sort_ascending.bind(this);\n    // $FlowFixMe TODO\n    this._sort_descending = this._sort_descending.bind(this);\n  }\n\n  // $FlowFixMe\n  [Symbol.iterator]() {\n    const values = this.values;\n    let index = -1;\n\n    return {\n      next: () => {\n        index += 1;\n        return {value: values.get(index), done: !(index >= 0 && index < values.size)};\n      },\n    };\n  }\n\n  /**\n   * Return a new `Series` created by a map along a `Series`\n   *\n   * pandas equivalent: [Series.map](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html)\n   *\n   * @param {function} func\n   *  Function to apply along the values\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'New Series'})\n   *\n   * // Returns Series([1, 4, 9, 16], {name: 'New Series', index: [1, 2]})\n   * ds.map((val, idx) => val ** 2);\n   */\n  map(func: T_MF): Series {\n    return new Series(\n      this.values.map((val, idx) => func(val, idx)),\n      {name: this.name, index: this.index});\n  }\n\n  /**\n   * forEach applied along the `Series` values\n   *\n   * @param {function} func\n   *  Function to apply along the values\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'New Series'})\n   *\n   * // Logs 1, 4, 9, 16\n   * ds.forEach((val, idx) => console.log(val ** 2));\n   */\n  forEach(func: T_MF): void {\n    this.values.forEach((val, idx) => func(val, idx));\n  }\n\n  /**\n   * Return the `Series` as a string\n   *\n   * @returns {string}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'My test name', index: [2, 3, 4, 5]})\n   * ds.toString()\n   * // Returns:\n   * // 2  1\n   * // 3  2\n   * // 4  3\n   * // 5  4\n   * // Name: My test name, dtype: dtype(int)\n   */\n  toString(): string {\n    // $FlowFixMe TODO\n    const vals = this.iloc(0, 10).values;\n\n    let valString = '';\n    vals.forEach((v, idx) => {\n      valString += `${this.index.get(idx)}\\t${v}\\n`;\n    });\n\n    return `${valString}Name: ${this.name}, dtype: ${this.dtype}`;\n  }\n\n  /**\n   * Return first n rows\n   *\n   * pandas equivalent: [Series.head](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.head.html)\n   *\n   * @param {number} n=5\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4, 5, 6, 7, 8]);\n   *\n   * // Returns Series([1, 2, 3, 4, 5])\n   * ds.head();\n   *\n   * // Returns Series([1, 2, 3])\n   * ds.head(3);\n   */\n  head(n: number = 5): Series {\n    // $FlowFixMe TODO\n    return this.iloc(0, n);\n  }\n\n  /**\n   * Return last n rows\n   *\n   * pandas equivalent: [Series.tail](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.tail.html)\n   *\n   * @param {number} n=5\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4, 5, 6, 7, 8]);\n   *\n   * // Returns Series([4, 5, 6, 7, 8])\n   * ds.tail();\n   *\n   * // Returns Series([6, 7, 8])\n   * ds.tail(3);\n   */\n  tail(n: number = 5): Series {\n    // $FlowFixMe TODO\n    return this.iloc(this.length - n, this.length);\n  }\n\n  /**\n   * Return a new deep copy of the `Series`\n   *\n   * pandas equivalent: [Series.copy](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.copy.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test 1'});\n   * const ds2 = ds.copy();\n   * ds2.index = [1, 2, 3];\n   * ds.index   // [0, 1, 2];\n   * ds2.index  // [1, 2, 3];\n   */\n  copy(): Series {\n    return new Series(this.values, {index: this.index, name: this.name});\n  }\n\n  get kwargs(): Object {\n    return {\n      name: this.name,\n      index: this.index,\n    };\n  }\n\n  /**\n   * Return the dtype of the underlying data\n   *\n   * pandas equivalent [Series.dtype](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dtype.html)\n   *\n   * @returns {DType}\n   *\n   * @example\n   * const ds = new Series([1.5, 2, 3], {name: 'Series name'});\n   * ds.dtype;    // dtype('float');\n\n   */\n  get dtype(): DType {\n    return this._dtype;\n  }\n\n  /**\n   * Return the index of the `Series`, an `Immutable.List`\n   *\n   * @returns {List}\n   *\n   * @example\n   * const ds = new Series([1.5, 2, 3], {name: 'Series name'});\n   *\n   * // Returns List [0, 1, 2]\n   * ds.index;\n   */\n  get index(): Immutable.List {\n    return this._get_axis(0);\n  }\n\n  /**\n   * Set the index of the `Series`, an `Immutable.List`\n   *\n   * @param {List|Array} index\n   *    The next values for the index of the `Series`\n   *\n   * @example\n   * const ds = new Series([1.5, 2, 3], {name: 'Series name'});\n   * ds.index = [1, 2, 3];\n   *\n   * // Returns List [1, 2, 3]\n   * ds.index;\n   */\n  set index(index: Immutable.List | Array<number | string>) {\n    this.set_axis(0, parseIndex(index, this.values));\n  }\n\n  /**\n   * Return the length of the `Series`\n   *\n   * pandas equivalent: len(series);\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds = new Series([1.5, 2, 3], {name: 'Series name'});\n   *\n   * // Returns 3\n   * ds.length;\n   */\n  get length(): number {\n    return this.values.size;\n  }\n\n  /**\n   * Return the values of the `Series` as an `Immutable.List`\n   *\n   * pandas equivalent: [Series.values](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.values.html);\n   *\n   * @returns {List}\n   *\n   * @example\n   * const ds = new Series([1.5, 2, 3], {name: 'Series name'});\n   *\n   * // Returns List [1.5, 2, 3]\n   * ds.values;\n   */\n  get values(): Immutable.List {\n    return super.values;\n  }\n\n  /**\n   * Return the name of the `Series`\n   *\n   * @returns {string}\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Convert the series to the desired type\n   *\n   * pandas equivalent: [Series.astype](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.astype.html)\n   *\n   * @param {DType} nextType\n   *\n   * @example\n   * const ds = new Series([1.5, 2, 3], {name: 'Series name'});\n   *\n   * // dtype('float')\n   * ds.dtype;\n   *\n   * // Series([1, 2, 3])\n   * ds.astype(new DType('int'))\n   */\n  astype(nextType: DType): Series {\n    if (!(nextType instanceof DType))\n      throw new Error('Next type must be a DType');\n\n    if (nextType.dtype === this.dtype)\n      return this;\n\n    switch (nextType.dtype) {\n      case 'int': {\n        if (this.dtype.dtype === 'object') throw new Error('Cannot convert object to int');\n        const kwargs = {name: this.name, index: this.index};\n        return new Series(this.values.map(v => Math.floor(v)), kwargs);\n      }\n      case 'float': {\n        if (this.dtype.dtype === 'object') throw new Error('Cannot convert object to float');\n        const kwargs = {name: this.name, index: this.index};\n        return new Series(this.values.map(v => parseFloat(v)), kwargs);\n      }\n      default:\n        throw new Error(`Invalid dtype ${nextType}`);\n    }\n  }\n\n  /**\n   * Return the Series between [startVal, endVal), or at startVal if endVal is undefined\n   *\n   * pandas equivalent: [Series.iloc](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.iloc.html)\n   *\n   * @param {int} startVal\n   * @param {int} [endVal]\n   *\n   * @returns {Series|number|string}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'New Series'})\n   * ds.iloc(1)      // 2\n   * ds.iloc(1, 3)   // Series([2, 3], {name: 'New Series', index: [1, 2]})\n   */\n  iloc(startVal: number, endVal: ?number): Series | number | string {\n    if (typeof endVal === 'undefined')\n      return this.values.get(startVal);\n\n    const {name} = this.kwargs;\n    const index = this.index.slice(startVal, endVal);\n\n    return new Series(this.values.slice(startVal, endVal), {name, index});\n  }\n\n  /**\n   * Return the sum of the values in the `Series`\n   *\n   * pandas equivalent: [Series.sum](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.sum.html)\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'New Series'})\n   *\n   * // Returns 10\n   * ds.sum();\n   */\n  sum(): number {\n    return sum(this.values);\n  }\n\n  /**\n   * Return the mean of the values in the `Series`\n   *\n   * pandas equivalent: [Series.mean](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.mean.html)\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4], {name: 'New Series'})\n   *\n   * // Returns 2.5\n   * ds.mean();\n   */\n  mean(): number {\n    return this.sum() / this.length;\n  }\n\n  /**\n   * Return the median of the values in the `Series`\n   *\n   * pandas equivalent: [Series.median](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.median.html)\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds = new Series([2, 3, 1, 4, 5], {name: 'New Series'})\n   *\n   * // Returns 3\n   * ds.median();\n   */\n  median(): number {\n    const sortedVals = this.values.sort();\n\n    if (this.length % 2 === 1)\n      return sortedVals.get(Math.floor(this.length / 2));\n\n    const halfLength = this.length / 2;\n    return (sortedVals.get(halfLength - 1) + sortedVals.get(halfLength)) / 2;\n  }\n\n  /**\n   * Return the variance of the values in the `Series`\n   *\n   * pandas equivalent: [Series.var](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.var.html)\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * // Returns 1\n   * ds.variance();\n   */\n  variance(): number {\n    const mean = this.mean();\n\n    return this.values.reduce((s, v) => {\n      const diff = v - mean;\n      return s + ((diff * diff) / (this.length - 1));\n    }, 0);\n  }\n\n  /**\n   * Return the standard deviation of the values in the `Series`\n   *\n   * pandas equivalent: [Series.std](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.std.html)\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * // Returns 1\n   * ds.std();\n   */\n  std(): number {\n    return Math.sqrt(this.variance());\n  }\n\n  /**\n   * Return Series with absolute value of all values\n   *\n   * pandas equivalent: [Series.abs](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.abs.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([-1, 2, -4, 5, -1, -2]);\n   *\n   * // Returns Series([1, 2, 4, 5, 1, 2]);\n   * ds.abs();\n   */\n  abs(): Series {\n    if (['bool', 'string', 'object'].indexOf(this.dtype.dtype) >= 0) return this.copy();\n\n    return new Series(this.values.map(v => Math.abs(v)), {name: this.name, index: this.index});\n  }\n\n  _combineOp(other: any, op: (a: number, b: number) => number, opName: string = ''): Series {\n    if (typeof other === 'number')\n      return this.map((val: number) => op(val, other));\n    else if (other instanceof Series)\n      return this.map((val: number, idx: number) => op(val, other.iloc(idx)));\n    else if (Array.isArray(other))\n      return this.map((val: number, idx: number) => op(val, other[idx]));\n    else if (other instanceof Immutable.List)\n      return this.map((val: number, idx: number) => op(val, other.get(idx)));\n\n    throw new Error(`${opName} only supports numbers, Arrays, Immutable List and pandas.Series`);\n  }\n\n  /**\n   * Add another Iterable, `Series`, or number to the `Series`\n   *\n   * pandas equivalent: [Series.add](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.add.html)\n   *\n   * @param {Iterable|Series|number} other\n   *  Value to add to the `Series`\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   * ds.add(5)                           // Series([6, 7, 8], {name: 'New Series'})\n   * ds.add(new Series([2, 3, 4]))       // Series([3, 5, 7], {name: 'New Series'})\n   * ds.add([2, 3, 4])                   // Series([3, 5, 7], {name: 'New Series'})\n   * ds.add(Immutable.List([2, 3, 4]))   // Series([3, 5, 7], {name: 'New Series'})\n   */\n  add(other: any): Series {\n    return this._combineOp(other, (a: number, b: number) => a + b, 'add');\n  }\n\n  /**\n   * Subtract another Iterable, `Series`, or number from the `Series`\n   *\n   * pandas equivalent: [Series.sub](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.sub.html)\n   *\n   * @param {Iterable|Series|number} other\n   *  Value to subtract from the `Series`\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * ds.sub(5)                           // Series([-4, -3, -2], {name: 'New Series'})\n   * ds.sub(new Series([2, 3, 4]))       // Series([-1, -1, -1], {name: 'New Series'})\n   * ds.sub([2, 3, 4])                   // Series([-1, -1, -1], {name: 'New Series'})\n   * ds.sub(Immutable.List([2, 3, 4]))   // Series([-1, -1, -1], {name: 'New Series'})\n   */\n  sub(other: any): Series {\n    return this._combineOp(other, (a: number, b: number) => a - b, 'sub');\n  }\n\n  /**\n   * Multiply by another Iterable, `Series`, or number from the `Series`\n   *\n   * pandas equivalent: [Series.mul](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.mul.html)\n   *\n   * @param {Iterable|Series|number} other\n   *  Value to multiply by the `Series`\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * ds.mul(5)                           // Series([5, 10, 15], {name: 'New Series'})\n   * ds.mul(new Series([2, 3, 4]))       // Series([2, 6, 12], {name: 'New Series'})\n   * ds.mul([2, 3, 4])                   // Series([2, 6, 12], {name: 'New Series'})\n   * ds.mul(Immutable.List([2, 3, 4]))   // Series([2, 6, 12], {name: 'New Series'})\n   */\n  mul(other: any): Series {\n    return this._combineOp(other, (a: number, b: number) => a * b);\n  }\n\n  /**\n   * Multiply by another Iterable, `Series`, or number from the `Series`\n   *\n   * pandas equivalent: [Series.multiply](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.multiply.html)\n   *\n   * @param {Iterable|Series|number} other\n   *  Value to multiply by the `Series`\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * ds.multiply(5)                           // Series([5, 10, 15], {name: 'New Series'})\n   * ds.multiply(new Series([2, 3, 4]))       // Series([2, 6, 12], {name: 'New Series'})\n   * ds.multiply([2, 3, 4])                   // Series([2, 6, 12], {name: 'New Series'})\n   * ds.multiply(Immutable.List([2, 3, 4]))   // Series([2, 6, 12], {name: 'New Series'})\n   */\n  multiply(other: any): Series {\n    return this.mul(other);\n  }\n\n  /**\n   * Divide by another Iterable, `Series`, or number from the `Series`\n   *\n   * pandas equivalent: [Series.div](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.div.html)\n   *\n   * @param {Iterable|Series|number} other\n   *  Value by which to divide the `Series`\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * ds.div(5)                           // Series([0.2, 0.4, 0.6], {name: 'New Series'})\n   * ds.div(new Series([4, 2, 1]))       // Series([0.25, 1, 3], {name: 'New Series'})\n   * ds.div([4, 2, 1])                   // Series([0.25, 1, 3], {name: 'New Series'})\n   * ds.div(Immutable.List([4, 2, 1]))   // Series([0.25, 1, 3], {name: 'New Series'})\n   */\n  div(other: any): Series {\n    return this._combineOp(other, (a: number, b: number) => a / b, 'div');\n  }\n\n  /**\n   * Divide by another Iterable, `Series`, or number from the `Series`\n   *\n   * pandas equivalent: [Series.divide](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.divide.html)\n   *\n   * @param {Iterable|Series|number} other\n   *  Value by which to divide the `Series`\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'New Series'})\n   *\n   * ds.divide(5)                           // Series([0.2, 0.4, 0.6], {name: 'New Series'})\n   * ds.divide(new Series([4, 2, 1]))       // Series([0.25, 1, 3], {name: 'New Series'})\n   * ds.divide([4, 2, 1])                   // Series([0.25, 1, 3], {name: 'New Series'})\n   * ds.divide(Immutable.List([4, 2, 1]))   // Series([0.25, 1, 3], {name: 'New Series'})\n   */\n  divide(other: any): Series {\n    return this.div(other);\n  }\n\n  /**\n   * Calculate the covariance between this `Series` and another `Series` or iterable\n   *\n   * pandas equivalent: [Series.cov](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.cov.html)\n   *\n   * @param {Series} ds\n   *    Series with which to calculate covariance\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds1 = new Series([1, 2, 3, 4, 5]);\n   * const ds2 = new Series([2, 4, 6, 8, 10]);\n   *\n   * // Returns 5\n   * ds1.cov(ds2);\n   *\n   * // Also returns 5\n   * ds2.cov(ds1);\n   */\n  cov(ds: Series): number {\n    if (!(ds instanceof Series))\n      throw new Error('ds must be a Series');\n\n    if (ds.length !== this.length)\n      throw new Error('Series must be of equal length');\n\n    let n = 0;\n    let mean1 = 0;\n    let mean2 = 0;\n    let m12 = 0;\n\n    this.values.forEach((v1, idx) => {\n      n += 1;\n      const d1 = (v1 - mean1) / n;\n      mean1 += d1;\n      const d2 = (ds.values.get(idx) - mean2) / n;\n      mean2 += d2;\n\n      m12 += ((((n - 1) * d1) * d2) - (m12 / n));\n    });\n\n    return (n / (n - 1)) * m12;\n  }\n\n  /**\n   * Calculate the correlation between this `Series` and another `Series` or iterable\n   *\n   * pandas equivalent: [Series.corr](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.corr.html)\n   *\n   * @param {Series} ds\n   *    Series with which to calculate correlation\n   *\n   * @returns {number}\n   *\n   * @example\n   * const ds1 = new Series([1, 2, 3, 4, 5]);\n   * const ds2 = new Series([2, 4, 6, 8, 10]);\n   *\n   * // Returns 1\n   * ds1.corr(ds2);\n   *\n   * // Also returns 1\n   * ds2.corr(ds1);\n   */\n  corr(ds: Series): number {\n    if (!(ds instanceof Series))\n      throw new Error('ds must be a Series');\n\n    if (ds.length !== this.length)\n      throw new Error('Series must be of equal length');\n\n    return this.cov(ds) / (this.std() * ds.std());\n  }\n\n  /**\n   * Return the difference over a given number of periods\n   *\n   * pandas equivalent: [Series.diff](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.diff.html)\n   *\n   * @param {number} periods=1\n   *  Number of periods to use for difference calculation\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 6, 5])\n   *\n   * // Returns Series([null, 1, 4, -1])\n   * ds.diff();\n   *\n   * // Returns Series([null, null, 5, 3])\n   * ds.diff(2);\n   */\n  diff(periods: number = 1): Series {\n    if (typeof periods !== 'number' || !Number.isInteger(periods))\n      throw new Error('periods must be an integer');\n    if (periods <= 0)\n      throw new Error('periods must be positive');\n\n    return new Series(\n      Immutable.Repeat(null, periods).toList().concat(\n        Immutable.Range(periods, this.length).map(idx =>\n          (this.values.get(idx) - this.values.get(idx - periods))).toList()),\n      {index: this.index, name: this.name});\n  }\n\n  /**\n   * Return the percentage change over a given number of periods\n   *\n   * pandas equivalent: [Series.pct_change](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.pct_change.html)\n   *\n   * @param {number} periods=1\n   *  Number of periods to use for percentage change calculation\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4, 5], {name: 'New Series'})\n   *\n   * ds.pct_change(1)    // Series([null, 1, 0.5, 0.333, 0.25], {name: 'New Series'})\n   * ds.pct_change(2)    // Series([null, null, 2, 1, 0.66666], {name: 'New Series'})\n   */\n  pct_change(periods: number = 1): Series {\n    if (typeof periods !== 'number' || !Number.isInteger(periods))\n      throw new Error('periods must be an integer');\n    if (periods <= 0)\n      throw new Error('periods must be positive');\n\n    return new Series(\n      Immutable.Repeat(null, periods).toList().concat(\n        Immutable.Range(periods, this.length).map(idx =>\n          (this.values.get(idx) / this.values.get(idx - periods)) - 1).toList()),\n      {index: this.index, name: this.name});\n  }\n\n  _sort_ascending(valueA: number, valueB: number) {\n    const valA = this.iloc(valueA);\n    const valB = this.iloc(valueB);\n\n    // $FlowFixMe\n    if (valA < valB) return -1;\n    // $FlowFixMe\n    else if (valA > valB) return 1;\n    return 0;\n  }\n\n  _sort_descending(valueA: number, valueB: number) {\n    const valA = this.iloc(valueA);\n    const valB = this.iloc(valueB);\n\n    // $FlowFixMe\n    if (valA > valB) return -1;\n    // $FlowFixMe\n    else if (valA < valB) return 1;\n    return 0;\n  }\n\n  /**\n   * Return a sorted `Series` in either ascending or descending order\n   *\n   * pandas equivalent: [Series.sort_values](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.sort_values.html)\n   *\n   * @param {boolean} ascending\n   *    Sort in ascending (true) or descending (false) order\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([2, 1, 0, 3], {name: 'New Series', index: [0, 1, 2, 3]})\n   *\n   * ds.sort_values(true)    // Series([0, 1, 2, 3], {name: 'New Series', index: [2, 1, 0, 3]})\n   * ds.sort_values(false)   // Series([3, 2, 1, 0], {name: 'New Series', index: [3, 0, 1, 2]})\n   */\n  sort_values(ascending: boolean = true): Series {\n    const sortedIndex = ascending\n      ? this.index.sort(this._sort_ascending)\n      : this.index.sort(this._sort_descending);\n\n    return new Series(sortedIndex.map(i => this.iloc(i)), {name: this.name, index: sortedIndex});\n  }\n\n  /**\n   * Return a `Series` with all values rounded to the nearest precision specified by decimals\n   *\n   * pandas equivalent: [Series.round](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.round.html)\n   *\n   * @param {number} decimals=0\n   *  Number of decimals to round to\n   *\n   * @example\n   * const ds = new Series([1.25, 1.47, 1.321])\n   *\n   * // Returns Series([1.3, 1.5, 1.3])\n   * ds.round(1);\n   */\n  round(decimals: number = 0): Series {\n    return new Series(this.values.map(v => round10(v, -1 * decimals)));\n  }\n\n  // Filtering methods\n\n  _alignSeries(series: Series): Immutable.Map {\n    // Align two series by index values, returning a Map with index values as keys and\n    // values as Maps with 1: List [value locations at index], 2: [value locations at index]\n\n    let seriesAlignment = Immutable.Map({});\n\n    this.index.forEach((idx1) => {\n      if (!(seriesAlignment.has(idx1))) {\n        seriesAlignment = seriesAlignment\n          .set(idx1, Immutable.Map({\n            first: Immutable.List.of(this.iloc(idx1)),\n            second: Immutable.List([]),\n          }));\n      } else {\n        seriesAlignment = seriesAlignment.updateIn([idx1, 'first'], l => l.concat(this.iloc(idx1)));\n      }\n    });\n\n    series.index.forEach((idx2) => {\n      if (!(seriesAlignment.has(idx2))) {\n        seriesAlignment = seriesAlignment\n          .set(idx2, Immutable.Map({\n            first: Immutable.List([]),\n            second: Immutable.List.of(series.iloc(idx2)),\n          }));\n      } else {\n        seriesAlignment = seriesAlignment.updateIn([idx2, 'second'],\n          l => l.concat(series.iloc(idx2)));\n      }\n    });\n\n    return seriesAlignment;\n  }\n\n  /**\n   * Flexible comparison of an iterable or value to the `Series`. Returns a `Series` of booleans of\n   * equivalent length\n   *\n   * pandas equivalent: [Series.where](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.where.html)\n   *\n   * @param {Series|Array|List|string|number} other\n   *  Iterable or value compared to Series\n   * @param {function} op\n   *  Function which takes (a, b) values and returns a boolean\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'})\n   *\n   * // Returns Series([true, false, false])\n   * ds.where(1, (v1, v2) => v1 === 1);\n   *\n   * // Returns Series([false, true, true])\n   * ds.where(new Series([0, 2, 3]), (v1, v2) => v1 === v2);\n   */\n  where(other: any, op: T_BF) {\n    const name = this.name;\n    const index = this.index;\n    const kwargs = {name, index};\n\n    if (!(Array.isArray(other)) && !(other instanceof Immutable.List) && !(other instanceof Series))\n      return new Series(this.values.map(v => op(v, other)), kwargs);\n\n    if (Array.isArray(other)) {\n      if (other.length !== this.length) throw new Error('Must be equal length for comparison');\n      return new Series(this.values.map((v, idx) => op(v, other[idx])), kwargs);\n    } else if (other instanceof Immutable.List) {\n      if (other.size !== this.length) throw new Error('Must be equal length for comparison');\n      return new Series(this.values.map((v, idx) => op(v, other.get(idx))), kwargs);\n    } else if (other instanceof Series) {\n      if (other.length !== this.length) throw new Error('Must be equal length for comparison');\n      return new Series(this.values.map((v, idx) => op(v, other.iloc(idx))), kwargs);\n    }\n\n    throw new Error('Must be scalar value, Array, Series, or Immutable.List');\n  }\n\n  /**\n   * Equal to of `Series` and other, element wise\n   *\n   * pandas equivalent: Series == val\n   *\n   * @param {Series|Array|List|number|string} other\n   *    Other `Series` or scalar value to check for equality\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'})\n   *\n   * // Returns Series([true, false, false])\n   * ds.eq(1);\n   *\n   * // Returns Series([false, true, true])\n   * ds.eq(new Series([0, 2, 3]));\n   *\n   * // Returns Series([false, true, true])\n   * ds.eq(Immutable.List([0, 2, 3]));\n   *\n   * // Returns Series([false, true, true])\n   * ds.eq([0, 2, 3]);\n   */\n  eq(other: any): Series {\n    return this.where(other, (a, b) => a === b);\n  }\n\n  /**\n   * Less than of `Series` and other, element wise\n   *\n   * pandas equivalent: Series < val\n   *\n   * @param {Series|Array|List|number|string} other\n   *    Other `Series` or scalar value to check for less than\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'})\n   *\n   * // Returns Series([false, false, false])\n   * ds.lt(1);\n   *\n   * // Returns Series([false, false, true])\n   * ds.lt(new Series([0, 2, 4]));\n   *\n   * // Returns Series([false, false, true])\n   * ds.lt(Immutable.List([0, 2, 5]));\n   *\n   * // Returns Series([false, false, true])\n   * ds.lt([0, 2, 5]);\n   */\n  lt(other: any): Series {\n    return this.where(other, (a, b) => a < b);\n  }\n\n  /**\n   * Less than or equal to of `Series` and other, element wise\n   *\n   * pandas equivalent: Series <= val\n   *\n   * @param {Series|Array|List|number|string} other\n   *    Other `Series` or scalar value to check for less than or equal to\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'})\n   *\n   * // Returns Series([false, false, false])\n   * ds.lte(1);\n   *\n   * // Returns Series([false, false, true])\n   * ds.lte(new Series([0, 2, 4]));\n   *\n   * // Returns Series([false, false, true])\n   * ds.lte(Immutable.List([0, 2, 5]));\n   *\n   * // Returns Series([false, false, true])\n   * ds.lte([0, 2, 5]);\n   */\n  lte(other: any): Series {\n    return this.where(other, (a, b) => a <= b);\n  }\n\n  /**\n   * Greater than of `Series` and other, element wise\n   *\n   * pandas equivalent: Series > val\n   *\n   * @param {Series|Array|List|number|string} other\n   *    Other `Series` or scalar value to check for greater than\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'})\n   *\n   * // Returns Series([false, true, true])\n   * ds.gt(1);\n   *\n   * // Returns Series([true, false, false])\n   * ds.gt(new Series([0, 2, 3]));\n   *\n   * // Returns Series([true, false, false])\n   * ds.gt(Immutable.List([0, 2, 3]));\n   *\n   * // Returns Series([true, false, false])\n   * ds.gt([0, 2, 3]);\n   */\n  gt(other: any): Series {\n    return this.where(other, (a, b) => a > b);\n  }\n\n  /**\n   * Greater than or equal to of `Series` and other, element wise\n   *\n   * pandas equivalent: Series >= val\n   *\n   * @param {Series|Array|List|number|string} other\n   *    Other `Series` or scalar value to check for greater than or equal to\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'})\n   *\n   * // Returns Series([true, true, true])\n   * ds.gte(1);\n   *\n   * // Returns Series([true, true, false])\n   * ds.gte(new Series([0, 2, 4]));\n   *\n   * // Returns Series([true, true, false])\n   * ds.gte(Immutable.List([0, 2, 4]));\n   *\n   * // Returns Series([true, true, false])\n   * ds.gte([0, 2, 4]);\n   */\n  gte(other: any): Series {\n    return this.where(other, (a, b) => a >= b);\n  }\n\n  /**\n   * Returns a boolean same-sized Series indicating if the values are not null\n   *\n   * pandas equivalent: [Series.notnull](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.notnull.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, null, null, 4]);\n   *\n   * // Returns Series([true, true, false, false, true])\n   * ds.notnull();\n   */\n  notnull(): Series {\n    return this.where(null, (a, b) => a !== b);\n  }\n\n  /**\n   * Shift index by desired number of periods\n   *\n   * pandas equivalent:s [Series.shift](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.shift.html)\n   *\n   * @param {number} periods\n   *  Number of periods to move, can be positive or negative\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3, 4]);\n   *\n   * // Returns Series([null, 1, 2, 3]);\n   * ds.shift(1);\n   *\n   * // Returns Series([null, null, 1, 2]);\n   * ds.shift(2);\n   *\n   * // Returns Series([3, 4, null, null]);\n   * ds.shift(-2);\n   */\n  shift(periods: number = 1): Series {\n    if (!Number.isInteger(periods)) throw new Error('periods must be an integer');\n\n    if (periods === 0) {\n      return this.copy();\n    } else if (periods < 0) {\n      const absPeriods = Math.abs(periods);\n\n      if (absPeriods > this.length) throw new Error('Periods greater than length of Series');\n\n      const values = this.values.slice(absPeriods, this.length)\n        .concat(Immutable.Repeat(null, absPeriods).toList());\n\n      return new Series(values, {name: this.name, index: this.index});\n    }\n\n    // periods > 0\n    if (periods > this.length) throw new Error('Periods greater than length of Series');\n\n    const values = Immutable.Repeat(null, periods).toList()\n      .concat(this.values.slice(0, this.length - periods));\n\n    return new Series(values, {name: this.name, index: this.index});\n  }\n\n  /**\n   * Returns `Immutable.List` of unique values in the `Series`. Preserves order of the original\n   *\n   * pandas equivalent: [Series.unique](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unique.html)\n   *\n   * @returns {List}\n   *\n   * @example\n   * const ds = new Series(['foo', 'bar', 'bar', 'foo', 'foo', 'test', 'bar', 'hi']);\n   * // Returns ['foo', 'bar', 'test', 'hi']\n   * ds.unique();\n   */\n  unique(): Immutable.List {\n    return this.values.toSet().toList();\n  }\n\n  /**\n   * Filter the Series by an Iterable (Series, Array, or List) of booleans and return the subset\n   *\n   * pandas equivalent: series[series condition]\n   *\n   * @param {Series|Array|List} iterBool\n   *    Iterable of booleans\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3]);\n   *\n   * // Returns Series([2, 3]);\n   * ds.filter(ds.gte(2));\n   */\n  filter(iterBool: Series | Array<boolean> | Immutable.List): Series {\n    if (!Array.isArray(iterBool)\n      && !(iterBool instanceof Immutable.List)\n      && !(iterBool instanceof Series))\n      throw new Error('filter must be an Array, List, or Series');\n\n    const valueIndexMap = {values: [], index: []};\n    if (iterBool instanceof Series)\n      iterBool.values.forEach((v, idx) => {\n        if (v === true) {\n          valueIndexMap.values.push(this.values.get(idx));\n          valueIndexMap.index.push(this.index.get(idx));\n        }\n      });\n    else {\n      iterBool.forEach((v, idx) => {\n        if (v === true) {\n          valueIndexMap.values.push(this.values.get(idx));\n          valueIndexMap.index.push(this.index.get(idx));\n        }\n      });\n    }\n\n    return new Series(valueIndexMap.values, {name: this.name, index: valueIndexMap.index});\n  }\n\n  _cumulativeHelper(operation: string = OP_CUMSUM): Series {\n    return new Series(generateCumulativeFunc(operation)(this.values), this.kwargs);\n  }\n\n  /**\n   * Return cumulative sum over requested axis\n   *\n   * pandas equivalent: [Series.cumsum](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.cumsum.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {index: [2, 3, 4]});\n   *\n   * // Returns Series([1, 3, 6], {index: [2, 3, 4]});\n   * ds.cumsum();\n   */\n  cumsum(): Series {\n    return this._cumulativeHelper(OP_CUMSUM);\n  }\n\n  /**\n   * Return cumulative mul over requested axis\n   *\n   * pandas equivalent: [Series.cummul](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.cummul.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {index: [2, 3, 4]});\n   *\n   * // Returns Series([1, 2, 6], {index: [2, 3, 4]});\n   * ds.cummul();\n   */\n  cummul(): Series {\n    return this._cumulativeHelper(OP_CUMMUL);\n  }\n\n  /**\n   * Return cumulative max over requested axis\n   *\n   * pandas equivalent: [Series.cummax](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.cummax.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([3, 2, 4], {index: [2, 3, 4]});\n   *\n   * // Returns Series([3, 3, 4], {index: [2, 3, 4]});\n   * ds.cummax();\n   */\n  cummax(): Series {\n    return this._cumulativeHelper(OP_CUMMAX);\n  }\n\n  /**\n   * Return cumulative min over requested axis\n   *\n   * pandas equivalent: [Series.cummin](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.cummin.html)\n   *\n   * @returns {Series}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {index: [2, 3, 4]});\n   *\n   * // Returns Series([1, 1, 1], {index: [2, 3, 4]});\n   * ds.cummin();\n   */\n  cummin(): Series {\n    return this._cumulativeHelper(OP_CUMMIN);\n  }\n\n  /**\n   * Convert the Series to a json object\n   *\n   * pandas equivalent: [Series.to_json](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.to_json.html)\n   *\n   * @param kwargs\n   * @param {string} [kwargs.orient=columns] orientation of JSON\n   *\n   * @returns {*}\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'x'});\n   *\n   * // Returns {0: 1, 1: 2, 2: 3}\n   * ds.to_json();\n   *\n   * // Returns [1, 2, 3]\n   * ds.to_json({orient: 'records'});\n   *\n   * // Returns {index: [0, 1, 2], name: 'x', values: [1, 2, 3]}\n   * ds.to_json({orient: 'split'});\n   */\n  to_json(kwargs: Object = {orient: 'index'}): Object {\n    const ALLOWED_ORIENT = ['records', 'split', 'index'];\n    let orient = 'index';\n\n    if (typeof kwargs.orient !== 'undefined') {\n      if (ALLOWED_ORIENT.indexOf(kwargs.orient) < 0) // $FlowFixMe TODO\n        throw new TypeError(`orient must be in ${ALLOWED_ORIENT}`);\n      orient = kwargs.orient;\n    }\n\n    let json;\n    switch (orient) {\n      case 'records':\n        return this.values.toArray();\n      case 'split':\n        return {index: this.index.toArray(), name: this.name, values: this.values.toJS()};\n      case 'index':\n        json = {};\n        this.values.forEach((v, idx) => {\n          json[this.index.get(idx)] = v;\n        });\n        return json;\n      default:\n        // $FlowFixMe TODO\n        throw new TypeError(`orient must be in ${ALLOWED_ORIENT}`);\n    }\n  }\n\n  /**\n   * Rename the `Series` and return a new `Series`\n   *\n   * pandas equivalent: [Series.rename](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.rename.html)\n   *\n   * @param {string} name\n   *\n   * @example\n   * const ds = new Series([1, 2, 3], {name: 'Test name'});\n   * ds.rename('New test name');\n   * // returns 'New test name'\n   * ds.name;\n   */\n  rename(name: string | number): Series {\n    return new Series(this._values, {name, index: this.index});\n  }\n\n  /**\n   * Append another Series to this and return a new Series\n   *\n   * pandas equivalent: [Series.append](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.append.html)\n   *\n   * @param {Series} other\n   * @param {boolean} ignore_index\n   * @returns {Series}\n   *\n   * @example\n   * const ds1 = new Series([1, 2, 3], {index: [1, 2, 3]});\n   * const ds2 = new Series([2, 3, 4], {index: [3, 4, 5]});\n   *\n   * // Returns Series([1, 2, 3, 2, 3, 4], {index: [1, 2, 3, 3, 4, 5]});\n   * ds1.append(ds2);\n   *\n   * // Returns Series([1, 2, 3, 2, 3, 4], {index: [0, 1, 2, 3, 4, 5]});\n   * ds1.append(ds2, true);\n   */\n  append(other: Series, ignore_index: boolean = false): Series {\n    // eslint-disable-next-line\n    return _concatSeries( // $FlowFixMe\n      [this, other],\n      {ignore_index});\n  }\n}\n\n\ntype T_ITER_SERIES = Array<Series> | Immutable.List<Series>;\ntype T_KWARGS = {ignore_index: boolean, axis?: 0 | 1};\nconst _concatSeriesValues = (objs: T_ITER_SERIES) =>\n  Immutable.List([]).concat(...objs.map(series => series.values));\nconst _concatSeriesIndices = (objs: T_ITER_SERIES) =>\n  Immutable.List([]).concat(...objs.map(series => series.index));\n\nexport const _concatSeries = (objs: Array<Series> | Immutable.List<Series>,\n                              kwargs: T_KWARGS): Series => {\n  if (objs instanceof Immutable.List\n    && objs.filter(series => series instanceof Series).size !== objs.size)\n    throw new Error('Objects must all be Series');\n  else if (Array.isArray(objs)\n    && objs.filter(series => series instanceof Series).length !== objs.length)\n    throw new Error('Objects must all be Series');\n\n  if (!kwargs.ignore_index)\n    return new Series(_concatSeriesValues(objs), {index: _concatSeriesIndices(objs)});\n  else if (kwargs.ignore_index) {\n    return new Series(\n      _concatSeriesValues(objs),\n      {index: Immutable.Range(0, objs.reduce((a, b: Series) => a + b.length, 0)).toList()});\n  }\n\n  throw new Error('Not supported');\n};\n"]}